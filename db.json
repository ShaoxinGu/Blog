{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Closure.md","hash":"38bb9cd4bb09a1a4d661355688ca4cbb959b0c66","modified":1571062671419},{"_id":"source/_posts/CSharpNote.md","hash":"ddb879b8c17d9392905d0b8ef9fab04e42736fd1","modified":1608483428848},{"_id":"source/_posts/LuaSource.md","hash":"8cc640c16a3ff5eef8ef150a3825e6e903af3d76","modified":1579098726712},{"_id":"source/_posts/Singleton.md","hash":"0377cb718c1ea1309234a3ea4da4ec45892e3076","modified":1571412208576},{"_id":"source/about/index.md","hash":"76209c66f3b084e85b267f70b054a1caa178950a","modified":1570895839408},{"_id":"source/tags/index.md","hash":"2b79326352b15468a77719e1dab155a5b9f94d8a","modified":1570725870989},{"_id":"source/categories/index.md","hash":"92ae3256d770e08275a9a937ad6adbffcc610348","modified":1570725870989},{"_id":"source/_posts/ShaderNote1.md","hash":"ef5514c31a81932020a932efbed9d4798ea1335d","modified":1570895795485},{"_id":"source/_posts/LuaOOP.md","hash":"186e0e199a2f503e8e57f7a58daba22bb62c2af7","modified":1570803446045},{"_id":"source/_posts/Trivial.md","hash":"b04e621b2f266daec5e85b248b35c897323f5fec","modified":1583426507143},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1609650529508},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1609650529508},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1609650529509},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"7e41e2fe86021a4db8e2e05f977a22f107c75d6c","modified":1609650529510},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"5f2d1185ce9a163b8b6b85c281181e8926c603a0","modified":1609650529511},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1609650529512},{"_id":"themes/hexo-theme-matery/README.md","hash":"3cf955698147323913705be823ae834ae2f1ad00","modified":1609650529510},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1609650529513},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1609650529514},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1609650529548},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1609650529514},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"626d28dbc7fa2e0fb6601e324dcad08993bcf002","modified":1609650529539},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1609650529541},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1609650529540},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1609650529540},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1609650529541},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1609650529542},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"a709898778c161dcb6d5bea047b8cb921628040c","modified":1609650529542},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"e6e6ab8624081e0f5e2d459427ca5069d7435c19","modified":1609650529542},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1609650529543},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1609650529543},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1609650529544},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1609650529544},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1609650529546},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1609650529546},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a761d3fd042e5138e4e094b9f4777d031fe2844b","modified":1609650529547},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1609650529547},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1609650529549},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"02e6072d766c6f631b5b75e1d774409103605491","modified":1609650529549},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1609650529548},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1609650529638},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1609650529649},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1609650529675},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1609650529676},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1609650529515},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"6b4341fbba291c53de91babb2a0d69940a8d6547","modified":1609650529516},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1609650529516},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1609650529516},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"2febeb9b824a9f5c6aa81e5c3864cb13df4965f2","modified":1609650529517},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1609650529517},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1609650529518},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1609650529519},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"2b33ec86be58152e0af06adcf66b1bf867940e20","modified":1609650529520},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1609650529520},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1609650529521},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1609650529521},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1609650529520},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"baf823506b71f257a42b44adaa52d42344b9cb65","modified":1609650529522},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1609650529522},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"495e929d02a0fafb1a7ebbef7c5a6dda62dc60a8","modified":1609650529523},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1609650529523},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"d0c1ebccbf0869678233aa46d2a61c6112926b2f","modified":1609650529524},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1609650529524},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1609650529525},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1609650529525},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1609650529525},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"4c552a47ed5abda4f3f28fc55899e6008007a996","modified":1609650529526},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"89045a73ce4c486084c8a3ade686676e5d12e5e7","modified":1609650529527},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1609650529527},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1609650529527},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1609650529528},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1609650529528},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1609650529529},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1609650529532},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1609650529530},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1609650529530},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"ef335be75e3f26580583af8699b8497f350ae200","modified":1609650529531},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1609650529532},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1609650529532},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1609650529533},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1609650529533},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1609650529534},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1609650529535},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1609650529535},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1609650529536},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1609650529536},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1609650529537},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1609650529537},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1609650529538},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1609650529538},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1609650529551},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1609650529554},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1609650529555},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1609650529553},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1609650529553},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1609650529588},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1609650529589},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1609650529589},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1609650529589},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1609650529590},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1609650529590},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1609650529591},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1609650529591},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1609650529592},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1609650529593},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1609650529602},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1609650529605},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1609650529606},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1609650529607},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1609650529607},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1609650529616},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1609650529624},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1609650529625},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1609650529623},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f48db880f583ad8d078ebaaa7afe60c2991e2997","modified":1609650529625},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1609650529626},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1609650529633},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1609650529633},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1609650529653},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1609650529656},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1609650529658},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1609650529659},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1609650529666},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1609650529668},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1609650529669},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1609650529669},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1609650529672},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1609650529673},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1609650529670},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1609650529674},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1609650529677},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1609650529682},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1609650529570},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1609650529573},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1609650529572},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1609650529573},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1609650529610},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1609650529610},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1609650529611},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1609650529611},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1609650529613},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1609650529613},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1609650529614},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1609650529614},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1609650529615},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1609650529627},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1609650529628},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1609650529629},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1609650529629},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1609650529630},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1609650529631},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1609650529632},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1609650529612},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1609650529595},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1609650529605},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1609650529608},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1609650529640},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1609650529642},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1609650529643},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1609650529652},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1609650529653},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1609650529654},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1609650529655},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1609650529657},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1609650529664},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1609650529662},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1609650529665},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1609650529667},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1609650529673},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1609650529671},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1609650529675},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1609650529636},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1609650529557},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1609650529559},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1609650529567},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1609650529568},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1609650529569},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1609650529587},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1609650529588},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1609650529650},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1609650529604},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1609650529619},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1609650529621},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1609650529641},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1609650529647},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1609650529648},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1609650529572},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1609650529637},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1609650529576},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1609650529586},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1609650529645},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1609650529565},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1609650529601},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1609650529583},{"_id":"public/atom.xml","hash":"8498440129834a04b6d86de520323597fb3cdd40","modified":1609650646725},{"_id":"public/content.json","hash":"d6c56cfa4a18488c5105e8c64ef3bd591b17bcf7","modified":1609650646725},{"_id":"public/about/index.html","hash":"9b5ab5751ece1d496dbd4b6782abe1cd17dc437e","modified":1609650646725},{"_id":"public/tags/index.html","hash":"b104f8a6b1cf7af8f0e98dab21f93272fb349331","modified":1609650646725},{"_id":"public/categories/index.html","hash":"a161bf8d3dcd5d612b8a184b4406e3b57583a29c","modified":1609650646725},{"_id":"public/2020/12/09/CSharpNote/index.html","hash":"79d34937a1be4a8473720a4ad31ef2698eaf338c","modified":1609650646725},{"_id":"public/2020/03/06/Trivial/index.html","hash":"ab34ca181cb9f48093da7a57f2e0e6746c9b7deb","modified":1609650646725},{"_id":"public/2020/01/15/LuaSource/index.html","hash":"92d8afd3b50e327abf5ac39d9c1dec433bf934a3","modified":1609650646725},{"_id":"public/2019/10/18/Singleton/index.html","hash":"c1dac8afe4f83695629e8af435231455d1b6a93c","modified":1609650646725},{"_id":"public/2019/10/14/Closure/index.html","hash":"add997a629d9e2a94e14cd30930ecec40a72f95f","modified":1609650646725},{"_id":"public/2019/10/11/ShaderNote1/index.html","hash":"18c1d9d94b9592a8b77d67cc1580e3048fa4dd18","modified":1609650646725},{"_id":"public/2019/10/11/LuaOOP/index.html","hash":"e8ac6209f04878a19aadac2566ccd275f630fcd7","modified":1609650646725},{"_id":"public/archives/index.html","hash":"d903bd29d899b23cf7ccaead53bda8a7ab69a010","modified":1609650646725},{"_id":"public/archives/2019/index.html","hash":"148888a73fbf0f9556de249b8854fed47419f6be","modified":1609650646725},{"_id":"public/archives/2019/10/index.html","hash":"f974bcf8a8ce3613a9a841d27943a025477dd37e","modified":1609650646725},{"_id":"public/archives/2020/index.html","hash":"db089083e5516fd0f99ac2bb187229f9894204a7","modified":1609650646725},{"_id":"public/archives/2020/01/index.html","hash":"daf35a07dce12d6a0de4e6ceaa69047da08a60df","modified":1609650646725},{"_id":"public/archives/2020/03/index.html","hash":"d92dda3fd42bfffbc08a7fa5c792a505c29d412f","modified":1609650646725},{"_id":"public/archives/2020/12/index.html","hash":"b92b4ebea417ac1f73eecc3a7a842621a9e436f2","modified":1609650646725},{"_id":"public/categories/学习笔记/index.html","hash":"bff3ecdcb680f3d44c83c3aa2ad1a4e699119ed2","modified":1609650646725},{"_id":"public/index.html","hash":"dbc9a3cd8d08d5ecf3b8921fa81c47164d1a2db8","modified":1609650646725},{"_id":"public/tags/C/index.html","hash":"0f7c9cc0dd4eafcd79b526268a453265835053ab","modified":1609650646725},{"_id":"public/tags/Lua/index.html","hash":"49eb704139bd8df209baf550650abc404ca7e988","modified":1609650646725},{"_id":"public/tags/设计模式/index.html","hash":"6f25382c6d6252b366c8279762a67222c556d674","modified":1609650646725},{"_id":"public/tags/Unity/index.html","hash":"305f48baace9da6dfb36bb0c66bd96b6b98c6885","modified":1609650646725},{"_id":"public/tags/Shader/index.html","hash":"396787eb3c0593ddae62a75ff1c19e1c48776fe4","modified":1609650646725},{"_id":"public/tags/其他/index.html","hash":"6074c85f25b9f003f268a6523102cb304b30712a","modified":1609650646725},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1609650646725},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1609650646725},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1609650646725},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1609650646725},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1609650646725},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1609650646725},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1609650646725},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1609650646725},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1609650646725},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1609650646725},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1609650646725},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1609650646725},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1609650646725},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1609650646725},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1609650646725},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1609650646725},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1609650646725},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1609650646725},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1609650646725},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1609650646725},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1609650646725},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1609650646725},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1609650646725},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1609650646725},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1609650646725},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1609650646725},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1609650646725},{"_id":"public/live2dw/assets/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1609650646725},{"_id":"public/live2dw/assets/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1609650646725},{"_id":"public/live2dw/assets/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1609650646725},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"77b9cffc61987bd179b7ba289eb1e5296d8ef345","modified":1609650646725},{"_id":"public/live2dw/assets/package.json","hash":"e21d8c50b58ffa1f237ac1a6d3f8ddf988352b67","modified":1609650646725},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1609650646725},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1609650646725},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1609650646725},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1609650646725},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1609650646725},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1609650646725},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1609650646725},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1609650646725},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1609650646725},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1609650646725},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1609650646725},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1609650646725},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1609650646725},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1609650646725},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1609650646725},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1609650646725},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1609650646725},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1609650646725},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1609650646725},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1609650646725},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1609650646725},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1609650646725},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1609650646725},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1609650646725},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1609650646725},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1609650646725},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1609650646725},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1609650646725},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1609650646725},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1609650646725},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1609650646725},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1609650646725},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1609650646725},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1609650646725},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1609650646725},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1609650646725},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1609650646725},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1609650646725},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1609650646725},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1609650646725},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1609650646725},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1609650646725},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1609650646725},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1609650646725},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1609650646725},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1609650646725},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1609650646725},{"_id":"public/live2dw/assets/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1609650646725},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1609650646725},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1609650646725},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1609650646725},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1609650646725},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1609650646725},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1609650646725},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1609650646725},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1609650646725},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1609650646725},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1609650646725},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1609650646725},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1609650646725},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1609650646725},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1609650646725},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1609650646725},{"_id":"public/live2dw/assets/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1609650646725},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1609650646725},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1609650646725},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1609650646725},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1609650646725},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1609650646725},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1609650646725},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1609650646725},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"94121cfcd4d0911a8314ab98efa7440dbabafe37","modified":1609650646725},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1609650646725},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1609650646725},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1609650646725},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1609650646725},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1609650646725},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1609650646725},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1609650646725},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1609650646725}],"Category":[{"name":"学习笔记","_id":"ckjgofpeu0003cgu8am1mb0x9"}],"Data":[],"Page":[{"title":"关于","date":"2019-10-11T06:26:09.000Z","layout":"about","comment":false,"_content":"\n## 关于博客\n\n> 这个博客是我的个人学习记录。\n>\n> 包括一些游戏开发相关的知识，和学习一些编程语言的笔记。\n>\n> 有时也会在这里记录下我的日常，写写我对人生的思考等等。\n>\n> 博客的搭建是基于Hexo的。\n>\n> 之前也试过用Jekyll，但是总觉得不够强大。\n>\n> 该项目托管在我的Github，由AppVeyor持续集成。\n>\n> 如果你也想搭一个这样的博客，可以上网搜相关的教程照着做。\n>\n> 有疑问的话也可以留言或邮件联系我。\n\n## 关于我\n\n> 我叫谷韶鑫，2018年毕业于广东外语外贸大学。\n>\n> 喜欢玩游戏、看电影和写代码。\n>\n> 如今我是一名游戏开发程序员。\n>\n> 客户端和服务端都懂一点，但是都不太行。\n>\n> 不论如何，一起变强吧！","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-10-11 14:26:09\nlayout: about\ncomment: false\n---\n\n## 关于博客\n\n> 这个博客是我的个人学习记录。\n>\n> 包括一些游戏开发相关的知识，和学习一些编程语言的笔记。\n>\n> 有时也会在这里记录下我的日常，写写我对人生的思考等等。\n>\n> 博客的搭建是基于Hexo的。\n>\n> 之前也试过用Jekyll，但是总觉得不够强大。\n>\n> 该项目托管在我的Github，由AppVeyor持续集成。\n>\n> 如果你也想搭一个这样的博客，可以上网搜相关的教程照着做。\n>\n> 有疑问的话也可以留言或邮件联系我。\n\n## 关于我\n\n> 我叫谷韶鑫，2018年毕业于广东外语外贸大学。\n>\n> 喜欢玩游戏、看电影和写代码。\n>\n> 如今我是一名游戏开发程序员。\n>\n> 客户端和服务端都懂一点，但是都不太行。\n>\n> 不论如何，一起变强吧！","updated":"2019-10-12T15:57:19.408Z","path":"about/index.html","comments":1,"_id":"ckjgofpec0000cgu8h2rs5yw3","content":"<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><blockquote>\n<p>这个博客是我的个人学习记录。</p>\n<p>包括一些游戏开发相关的知识，和学习一些编程语言的笔记。</p>\n<p>有时也会在这里记录下我的日常，写写我对人生的思考等等。</p>\n<p>博客的搭建是基于Hexo的。</p>\n<p>之前也试过用Jekyll，但是总觉得不够强大。</p>\n<p>该项目托管在我的Github，由AppVeyor持续集成。</p>\n<p>如果你也想搭一个这样的博客，可以上网搜相关的教程照着做。</p>\n<p>有疑问的话也可以留言或邮件联系我。</p>\n</blockquote>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><blockquote>\n<p>我叫谷韶鑫，2018年毕业于广东外语外贸大学。</p>\n<p>喜欢玩游戏、看电影和写代码。</p>\n<p>如今我是一名游戏开发程序员。</p>\n<p>客户端和服务端都懂一点，但是都不太行。</p>\n<p>不论如何，一起变强吧！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><blockquote>\n<p>这个博客是我的个人学习记录。</p>\n<p>包括一些游戏开发相关的知识，和学习一些编程语言的笔记。</p>\n<p>有时也会在这里记录下我的日常，写写我对人生的思考等等。</p>\n<p>博客的搭建是基于Hexo的。</p>\n<p>之前也试过用Jekyll，但是总觉得不够强大。</p>\n<p>该项目托管在我的Github，由AppVeyor持续集成。</p>\n<p>如果你也想搭一个这样的博客，可以上网搜相关的教程照着做。</p>\n<p>有疑问的话也可以留言或邮件联系我。</p>\n</blockquote>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><blockquote>\n<p>我叫谷韶鑫，2018年毕业于广东外语外贸大学。</p>\n<p>喜欢玩游戏、看电影和写代码。</p>\n<p>如今我是一名游戏开发程序员。</p>\n<p>客户端和服务端都懂一点，但是都不太行。</p>\n<p>不论如何，一起变强吧！</p>\n</blockquote>\n"},{"title":"tags","date":"2019-10-09T07:16:45.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-10-09 15:16:45\nlayout: tags\ncomments: false\n---\n","updated":"2019-10-10T16:44:30.989Z","path":"tags/index.html","_id":"ckjgofpes0002cgu8alm0hh6f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-10-09T07:16:55.000Z","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-10-09 15:16:55\nlayout: categories\ncomments: false\n---\n","updated":"2019-10-10T16:44:30.989Z","path":"categories/index.html","_id":"ckjgofpew0005cgu81zwcbwrw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C#学习笔记","_content":"\n# 基础\n\n## 代码结构\n\n```c#\nusing System; //引入命名空间（引用已有工具包）\n\nnamespace Test //定义函数命名空间（工具包）\n{\n\tclass Program //定义类（工具）\n    {\n        static void Main(string[] args) //定义函数（工具的使用方法）\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n```\n\n## 数据类型\n\n### 整形\n\n| 数据类型 | 别名 | 字节数 | 位数 | 允许的值 |\n| :------: | :------: |:------: |:------: | :------: |\n| sbyte    | System.Sbyte | 1      | 8    | -127~128 |\n| byte | System.Byte | 1 | 8 | 0~255 |\n| short | System.Int16 | 2 | 16 | -32768~32767 |\n| ushort | System.UInt16 | 2 | 16 | 0~65535 |\n| int | System.Int32 | 4 | 32 | -2147483648~2147483647 |\n| int | System.UInt32 | 4 | 32 | 0~4294967295 |\n| long | System.Int64 | 8 | 64 | -9223372036854775808~9223372036854775807 |\n| ulong | System.UInt64 | 8 | 64 | 0~18446744073709551615 |\n\n### 浮点型\n\n| 数据类型 |      别名      | 字节数 | 位数 |  标识   |\n| :------: | :------------: | :----: | :--: | :-----: |\n|  float   | System.Single  |   4    |  32  |    f    |\n|  double  | System.Double  |   8    |  64  | d(默认) |\n| decimal  | System.Decimal |   16   | 128  |    m    |\n\n### 简单类型\n\n| 数据类型 | 别名           | 字节数 | 位数 | 允许的值            |\n| :------: | :------: | :------: |:------: | :------:|\n| char     | System.Char    | **2**  | **16** | 一个Unicode字符     |\n| bool     | System.Boolean | 1      | 8    | 布尔值：true或false |\n| string   | System.String  | ---    | ---  | 一组字符            |\n\n### 类型转换\n\n隐式转换：变量转换为范围更大、精度更高的类型可自动完成，称为隐式转换\n\n显示转换：变量转换为范围更小、精度更低的类型可能会出现异常、损失精度，因此需要手动转换，称为显示转换。\n\n#### 显示转换的四种方式\n\n1. (类型)变量\n2. 类型.Parse(字符串)\n3. Convert.ToInt32(变量)\n4. 变量.ToString()","source":"_posts/CSharpNote.md","raw":"---\ntitle: C#学习笔记\ntags: C#\ncategories: 学习笔记\n---\n\n# 基础\n\n## 代码结构\n\n```c#\nusing System; //引入命名空间（引用已有工具包）\n\nnamespace Test //定义函数命名空间（工具包）\n{\n\tclass Program //定义类（工具）\n    {\n        static void Main(string[] args) //定义函数（工具的使用方法）\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n```\n\n## 数据类型\n\n### 整形\n\n| 数据类型 | 别名 | 字节数 | 位数 | 允许的值 |\n| :------: | :------: |:------: |:------: | :------: |\n| sbyte    | System.Sbyte | 1      | 8    | -127~128 |\n| byte | System.Byte | 1 | 8 | 0~255 |\n| short | System.Int16 | 2 | 16 | -32768~32767 |\n| ushort | System.UInt16 | 2 | 16 | 0~65535 |\n| int | System.Int32 | 4 | 32 | -2147483648~2147483647 |\n| int | System.UInt32 | 4 | 32 | 0~4294967295 |\n| long | System.Int64 | 8 | 64 | -9223372036854775808~9223372036854775807 |\n| ulong | System.UInt64 | 8 | 64 | 0~18446744073709551615 |\n\n### 浮点型\n\n| 数据类型 |      别名      | 字节数 | 位数 |  标识   |\n| :------: | :------------: | :----: | :--: | :-----: |\n|  float   | System.Single  |   4    |  32  |    f    |\n|  double  | System.Double  |   8    |  64  | d(默认) |\n| decimal  | System.Decimal |   16   | 128  |    m    |\n\n### 简单类型\n\n| 数据类型 | 别名           | 字节数 | 位数 | 允许的值            |\n| :------: | :------: | :------: |:------: | :------:|\n| char     | System.Char    | **2**  | **16** | 一个Unicode字符     |\n| bool     | System.Boolean | 1      | 8    | 布尔值：true或false |\n| string   | System.String  | ---    | ---  | 一组字符            |\n\n### 类型转换\n\n隐式转换：变量转换为范围更大、精度更高的类型可自动完成，称为隐式转换\n\n显示转换：变量转换为范围更小、精度更低的类型可能会出现异常、损失精度，因此需要手动转换，称为显示转换。\n\n#### 显示转换的四种方式\n\n1. (类型)变量\n2. 类型.Parse(字符串)\n3. Convert.ToInt32(变量)\n4. 变量.ToString()","slug":"CSharpNote","published":1,"date":"2020-12-08T16:27:42.661Z","updated":"2020-12-20T16:57:08.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjgofpeo0001cgu8e1x75qn6","content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h2><pre><code class=\"c#\">using System; //引入命名空间（引用已有工具包）\n\nnamespace Test //定义函数命名空间（工具包）\n&#123;\n    class Program //定义类（工具）\n    &#123;\n        static void Main(string[] args) //定义函数（工具的使用方法）\n        &#123;\n            Console.WriteLine(&quot;Hello World!&quot;);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"整形\"><a href=\"#整形\" class=\"headerlink\" title=\"整形\"></a>整形</h3><table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">别名</th>\n<th align=\"center\">字节数</th>\n<th align=\"center\">位数</th>\n<th align=\"center\">允许的值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">sbyte</td>\n<td align=\"center\">System.Sbyte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n<td align=\"center\">-127~128</td>\n</tr>\n<tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">System.Byte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n<td align=\"center\">0~255</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">System.Int16</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n<td align=\"center\">-32768~32767</td>\n</tr>\n<tr>\n<td align=\"center\">ushort</td>\n<td align=\"center\">System.UInt16</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n<td align=\"center\">0~65535</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">System.Int32</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n<td align=\"center\">-2147483648~2147483647</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">System.UInt32</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n<td align=\"center\">0~4294967295</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">System.Int64</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n<td align=\"center\">-9223372036854775808~9223372036854775807</td>\n</tr>\n<tr>\n<td align=\"center\">ulong</td>\n<td align=\"center\">System.UInt64</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n<td align=\"center\">0~18446744073709551615</td>\n</tr>\n</tbody></table>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">别名</th>\n<th align=\"center\">字节数</th>\n<th align=\"center\">位数</th>\n<th align=\"center\">标识</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">float</td>\n<td align=\"center\">System.Single</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n<td align=\"center\">f</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">System.Double</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n<td align=\"center\">d(默认)</td>\n</tr>\n<tr>\n<td align=\"center\">decimal</td>\n<td align=\"center\">System.Decimal</td>\n<td align=\"center\">16</td>\n<td align=\"center\">128</td>\n<td align=\"center\">m</td>\n</tr>\n</tbody></table>\n<h3 id=\"简单类型\"><a href=\"#简单类型\" class=\"headerlink\" title=\"简单类型\"></a>简单类型</h3><table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">别名</th>\n<th align=\"center\">字节数</th>\n<th align=\"center\">位数</th>\n<th align=\"center\">允许的值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">char</td>\n<td align=\"center\">System.Char</td>\n<td align=\"center\"><strong>2</strong></td>\n<td align=\"center\"><strong>16</strong></td>\n<td align=\"center\">一个Unicode字符</td>\n</tr>\n<tr>\n<td align=\"center\">bool</td>\n<td align=\"center\">System.Boolean</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n<td align=\"center\">布尔值：true或false</td>\n</tr>\n<tr>\n<td align=\"center\">string</td>\n<td align=\"center\">System.String</td>\n<td align=\"center\">—</td>\n<td align=\"center\">—</td>\n<td align=\"center\">一组字符</td>\n</tr>\n</tbody></table>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>隐式转换：变量转换为范围更大、精度更高的类型可自动完成，称为隐式转换</p>\n<p>显示转换：变量转换为范围更小、精度更低的类型可能会出现异常、损失精度，因此需要手动转换，称为显示转换。</p>\n<h4 id=\"显示转换的四种方式\"><a href=\"#显示转换的四种方式\" class=\"headerlink\" title=\"显示转换的四种方式\"></a>显示转换的四种方式</h4><ol>\n<li>(类型)变量</li>\n<li>类型.Parse(字符串)</li>\n<li>Convert.ToInt32(变量)</li>\n<li>变量.ToString()</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h2><pre><code class=\"c#\">using System; //引入命名空间（引用已有工具包）\n\nnamespace Test //定义函数命名空间（工具包）\n&#123;\n    class Program //定义类（工具）\n    &#123;\n        static void Main(string[] args) //定义函数（工具的使用方法）\n        &#123;\n            Console.WriteLine(&quot;Hello World!&quot;);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"整形\"><a href=\"#整形\" class=\"headerlink\" title=\"整形\"></a>整形</h3><table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">别名</th>\n<th align=\"center\">字节数</th>\n<th align=\"center\">位数</th>\n<th align=\"center\">允许的值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">sbyte</td>\n<td align=\"center\">System.Sbyte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n<td align=\"center\">-127~128</td>\n</tr>\n<tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">System.Byte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n<td align=\"center\">0~255</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">System.Int16</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n<td align=\"center\">-32768~32767</td>\n</tr>\n<tr>\n<td align=\"center\">ushort</td>\n<td align=\"center\">System.UInt16</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n<td align=\"center\">0~65535</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">System.Int32</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n<td align=\"center\">-2147483648~2147483647</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">System.UInt32</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n<td align=\"center\">0~4294967295</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">System.Int64</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n<td align=\"center\">-9223372036854775808~9223372036854775807</td>\n</tr>\n<tr>\n<td align=\"center\">ulong</td>\n<td align=\"center\">System.UInt64</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n<td align=\"center\">0~18446744073709551615</td>\n</tr>\n</tbody></table>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">别名</th>\n<th align=\"center\">字节数</th>\n<th align=\"center\">位数</th>\n<th align=\"center\">标识</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">float</td>\n<td align=\"center\">System.Single</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n<td align=\"center\">f</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">System.Double</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n<td align=\"center\">d(默认)</td>\n</tr>\n<tr>\n<td align=\"center\">decimal</td>\n<td align=\"center\">System.Decimal</td>\n<td align=\"center\">16</td>\n<td align=\"center\">128</td>\n<td align=\"center\">m</td>\n</tr>\n</tbody></table>\n<h3 id=\"简单类型\"><a href=\"#简单类型\" class=\"headerlink\" title=\"简单类型\"></a>简单类型</h3><table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">别名</th>\n<th align=\"center\">字节数</th>\n<th align=\"center\">位数</th>\n<th align=\"center\">允许的值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">char</td>\n<td align=\"center\">System.Char</td>\n<td align=\"center\"><strong>2</strong></td>\n<td align=\"center\"><strong>16</strong></td>\n<td align=\"center\">一个Unicode字符</td>\n</tr>\n<tr>\n<td align=\"center\">bool</td>\n<td align=\"center\">System.Boolean</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n<td align=\"center\">布尔值：true或false</td>\n</tr>\n<tr>\n<td align=\"center\">string</td>\n<td align=\"center\">System.String</td>\n<td align=\"center\">—</td>\n<td align=\"center\">—</td>\n<td align=\"center\">一组字符</td>\n</tr>\n</tbody></table>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>隐式转换：变量转换为范围更大、精度更高的类型可自动完成，称为隐式转换</p>\n<p>显示转换：变量转换为范围更小、精度更低的类型可能会出现异常、损失精度，因此需要手动转换，称为显示转换。</p>\n<h4 id=\"显示转换的四种方式\"><a href=\"#显示转换的四种方式\" class=\"headerlink\" title=\"显示转换的四种方式\"></a>显示转换的四种方式</h4><ol>\n<li>(类型)变量</li>\n<li>类型.Parse(字符串)</li>\n<li>Convert.ToInt32(变量)</li>\n<li>变量.ToString()</li>\n</ol>\n"},{"title":"Lua的闭包","_content":"\n# 闭包\n\n>  闭包是一个函数以及它的 upvalues。","source":"_posts/Closure.md","raw":"---\ntitle: Lua的闭包\ntags: Lua\ncategories: 学习笔记\n---\n\n# 闭包\n\n>  闭包是一个函数以及它的 upvalues。","slug":"Closure","published":1,"date":"2019-10-14T14:17:51.419Z","updated":"2019-10-14T14:17:51.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjgofpf10008cgu80ub800ew","content":"<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><blockquote>\n<p> 闭包是一个函数以及它的 upvalues。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><blockquote>\n<p> 闭包是一个函数以及它的 upvalues。</p>\n</blockquote>\n"},{"title":"Lua实现面向对象","_content":"\n# 概述\n\n以下描述出自《Program in Lua》中文版：\n\n>​\t\t一些面向对象的语言中提供了类的概念，作为创建对象的模板。在这些语言里，对象是类的实例。Lua 不存在类的概念，每个对象定义他自己的行为并拥有自己的形状（shape）。然而，依据基于原型（prototype）的语言比如 Self 和 NewtonScript，在 Lua中仿效类的概念并不难。在这些语言中，对象没有类。相反，每个对象都有一个 prototype（原型），当调用不属于对象的某些操作时，会最先会到 prototype 中查找这些操作。在这类语言中实现类（class）的机制，我们创建一个对象，作为其它对象的原型即可（原型对象为类，其它对象为类的 instance）。类与 prototype 的工作机制相同，都是定义了特定对象的行为。\n\n\n\n# 实现方案\n\n## 方案一\n\nLua的作者之一[Roberto Lerusalimschy](https://en.wikipedia.org/wiki/Roberto_Ierusalimschy)在《Program in Lua》书中推荐了[一种实现LuaOO的方案](http://www.lua.org/pil/16.html)，这种方案很简单也很容易理解。\n\n在Lua里，类和实例都是table。在继承或实例化的时候，类会被赋值给实例或子类metatable的__index。\n\n核心代码其实就这几行：\n\n```lua\nClass = {}\nfunction Class:new (o)\n    o = o or {}   -- create object if user does not provide one\n    setmetatable(o, self)\n    self.__index = self\n    return o\nend\n```\n具体的案例如下：\n```lua\nBase = {}\nfunction Base:new (o)\n    o = o or {}   -- create object if user does not provide one\n    setmetatable(o, self)\n    self.__index = self\n    return o\nend\n\nfunction Base:Test1()\n    print(\"Base Test1\")\nend\n\nfunction Base:Test2()\n    print(\"Base Test2\")\nend\n\n--Child既可以说是Base类的实例，也可以说是Base类的子类，因为它们本质上都是table对象\nChild = Base:new()\n\nfunction Child:Test1() --Child类重写了Test1方法\n    print(\"Child Test1\")\nend\n\nlocal a = Base:new()    --生成一个Base类的实例\na:Test1()               --将打印\"Base Test1\"\na:Test2()               --将打印\"Base Test2\"\n\nlocal b = Child:new()   --生成一个Child类的实例\nb:Test1()               --将打印\"Child Test1\"\nb:Test2()               --将打印\"Base Test2\",调用的是父类的方法\n```\n\n## 方案二\n\n这个方案是我在工作中接触到的，算是方案一的升级版。\n\n核心代码如下：\n\n```lua\n-- 所有类都会继承自这个类，真·基类\nClass = {__ClassType = \"Class\"}\t\nALL_CLASS = ALL_CLASS or {}\n\nfunction Class:Inherit(ClassName, o)\n    o = o or {}\n    o.mt = { __index = o}\n    assert(ClassName, \"必须要有类名\")\n    assert(not (ClassName and ALL_CLASS[ClassName]), string.format(\"该类已存在： %s\", ClassName))\n\n    o.__ClassType = ClassName\n    ALL_CLASS[ClassName] = true\n\n    o.__InheritMap = {[self:GetType()] = true }  -- 记录继承类型\n    o.__InheritSelf = false\n    if self.__InheritMap then\n        for UpType, _ in pairs(self.__InheritMap) do\n            o.__InheritMap[UpType] = true\n        end\n    end\n\n    setmetatable(o, {__index = self})\n    return o\nend\n\nfunction Class:IsSubObj(ObjType)\n    return self:GetTypeMap()[ObjType]\nend\n\nfunction Class:GetTypeMap()\n    local clsSelf = getmetatable(self)\n    if clsSelf then\n        local Temp = clsSelf.__index\n        if not Temp.__InheritSelf then\n            Temp.__InheritMap[Temp:GetType()] = true\n            Temp.__InheritSelf = true\n        end\n        return Temp.__InheritMap\n    end\n    return {}\nend\n\nfunction Class:New(...)\n    local o = {}\n    setmetatable(o, {__index = self})\n    if o.Ctor then o:Ctor(...) end --调用构造函数\n    return o\nend\n\nfunction Class:Ctor() end\nfunction Class:InClass() return true end\nfunction Class:OnCreate() end\nfunction Class:OnDestroy() end\nfunction Class:GetType()\treturn self.__ClassType end\n\n--获取一个class的父类\nfunction Super(Class)\n    return getmetatable(Class).__index\nend\n\n--判断一个类是否是类的子类 & 判断一个对象否是另一个类的实例\nfunction IsSub(Obj, Base)\n    local Temp = Obj\n    while  1 do     --循环回溯metatable\n        local mt = getmetatable(Temp)\n        if mt then\n            Temp = mt.__index\n            if Temp == Base then\n                return true\n            end\n        else\n            return false\n        end\n    end\nend\n```\n\n示例如下：\n\n```lua\nBase = Base or Class:Inherit(\"Base\")\n\nfunction Base:Test1()\n    print(\"Base Test1\")\nend\n\nfunction Base:Test2()\n    print(\"Base Test2\")\nend\n\nChild = Child or Base:Inherit(\"Child\")\n\nfunction Child:Test1()  --Child类重写了Test1方法\n    print(\"Child Test1\")\nend\n\nlocal a = Base:new()    --生成一个Base类的实例\na:Test1()               --将打印\"Base Test1\"\na:Test2()               --将打印\"Base Test2\"\n\nlocal b = Child:new()   --生成一个Child类的实例\nb:Test1()               --将打印\"Child Test1\"\nb:Test2()               --将打印\"Base Test2\",调用的是父类的方法\n```\n\n## 方案三\n\n这个是云风提供的方案：[博客地址](https://blog.codingnow.com/cloud/LuaOO)。\n\n```lua\nlocal _class={}\n \nfunction class(super)\n\tlocal class_type={}\n\tclass_type.ctor=false\n\tclass_type.super=super\n\tclass_type.new=function(...) \n\t\t\tlocal obj={}\n\t\t\tdo\n\t\t\t\tlocal create\n\t\t\t\tcreate = function(c,...)\n\t\t\t\t\tif c.super then\n\t\t\t\t\t\tcreate(c.super,...)\n\t\t\t\t\tend\n\t\t\t\t\tif c.ctor then\n\t\t\t\t\t\tc.ctor(obj,...)\n\t\t\t\t\tend\n\t\t\t\tend\n \n\t\t\t\tcreate(class_type,...)\n\t\t\tend\n\t\t\tsetmetatable(obj,{ __index=_class[class_type] })\n\t\t\treturn obj\n\t\tend\n\tlocal vtbl={}\n\t_class[class_type]=vtbl\n \n\tsetmetatable(class_type,{__newindex=\n\t\tfunction(t,k,v)\n\t\t\tvtbl[k]=v\n\t\tend\n\t})\n \n\tif super then\n\t\tsetmetatable(vtbl,{__index=\n\t\t\tfunction(t,k)\n\t\t\t\tlocal ret=_class[super][k]\n\t\t\t\tvtbl[k]=ret\n\t\t\t\treturn ret\n\t\t\tend\n\t\t})\n\tend\n \n\treturn class_type\nend\n```\n\n创建基类：\n\n```lua\nbase_type=class()\t\t\t-- 定义一个基类 base_type\n \nfunction base_type:ctor(x)\t-- 定义 base_type 的构造函数\n\tprint(\"base_type ctor\")\n\tself.x=x\nend\n \nfunction base_type:print_x()-- 定义一个成员函数 base_type:print_x\n\tprint(self.x)\nend\n \nfunction base_type:hello()\t-- 定义另一个成员函数 base_type:hello\n\tprint(\"hello base_type\")\nend\n```\n\n创建子类：\n\n```lua\ntest=class(base_type)\t-- 定义一个类 test 继承于 base_type\n \nfunction test:ctor()\t-- 定义 test 的构造函数\n\tprint(\"test ctor\")\nend\n \nfunction test:hello()\t-- 重载 base_type:hello 为 test:hello\n\tprint(\"hello test\")\nend\n```\n\n测试：\n\n```lua\na=test.new(1)\t-- 输出两行，base_type ctor 和 test ctor 。这个对象被正确的构造了。\na:print_x()\t\t-- 输出 1 ，这个是基类 base_type 中的成员函数。\na:hello()\t\t-- 输出 hello test ，这个函数被重载了。\n```\n\n","source":"_posts/LuaOOP.md","raw":"---\ntitle: Lua实现面向对象\ntags: Lua\ncategories: 学习笔记\n---\n\n# 概述\n\n以下描述出自《Program in Lua》中文版：\n\n>​\t\t一些面向对象的语言中提供了类的概念，作为创建对象的模板。在这些语言里，对象是类的实例。Lua 不存在类的概念，每个对象定义他自己的行为并拥有自己的形状（shape）。然而，依据基于原型（prototype）的语言比如 Self 和 NewtonScript，在 Lua中仿效类的概念并不难。在这些语言中，对象没有类。相反，每个对象都有一个 prototype（原型），当调用不属于对象的某些操作时，会最先会到 prototype 中查找这些操作。在这类语言中实现类（class）的机制，我们创建一个对象，作为其它对象的原型即可（原型对象为类，其它对象为类的 instance）。类与 prototype 的工作机制相同，都是定义了特定对象的行为。\n\n\n\n# 实现方案\n\n## 方案一\n\nLua的作者之一[Roberto Lerusalimschy](https://en.wikipedia.org/wiki/Roberto_Ierusalimschy)在《Program in Lua》书中推荐了[一种实现LuaOO的方案](http://www.lua.org/pil/16.html)，这种方案很简单也很容易理解。\n\n在Lua里，类和实例都是table。在继承或实例化的时候，类会被赋值给实例或子类metatable的__index。\n\n核心代码其实就这几行：\n\n```lua\nClass = {}\nfunction Class:new (o)\n    o = o or {}   -- create object if user does not provide one\n    setmetatable(o, self)\n    self.__index = self\n    return o\nend\n```\n具体的案例如下：\n```lua\nBase = {}\nfunction Base:new (o)\n    o = o or {}   -- create object if user does not provide one\n    setmetatable(o, self)\n    self.__index = self\n    return o\nend\n\nfunction Base:Test1()\n    print(\"Base Test1\")\nend\n\nfunction Base:Test2()\n    print(\"Base Test2\")\nend\n\n--Child既可以说是Base类的实例，也可以说是Base类的子类，因为它们本质上都是table对象\nChild = Base:new()\n\nfunction Child:Test1() --Child类重写了Test1方法\n    print(\"Child Test1\")\nend\n\nlocal a = Base:new()    --生成一个Base类的实例\na:Test1()               --将打印\"Base Test1\"\na:Test2()               --将打印\"Base Test2\"\n\nlocal b = Child:new()   --生成一个Child类的实例\nb:Test1()               --将打印\"Child Test1\"\nb:Test2()               --将打印\"Base Test2\",调用的是父类的方法\n```\n\n## 方案二\n\n这个方案是我在工作中接触到的，算是方案一的升级版。\n\n核心代码如下：\n\n```lua\n-- 所有类都会继承自这个类，真·基类\nClass = {__ClassType = \"Class\"}\t\nALL_CLASS = ALL_CLASS or {}\n\nfunction Class:Inherit(ClassName, o)\n    o = o or {}\n    o.mt = { __index = o}\n    assert(ClassName, \"必须要有类名\")\n    assert(not (ClassName and ALL_CLASS[ClassName]), string.format(\"该类已存在： %s\", ClassName))\n\n    o.__ClassType = ClassName\n    ALL_CLASS[ClassName] = true\n\n    o.__InheritMap = {[self:GetType()] = true }  -- 记录继承类型\n    o.__InheritSelf = false\n    if self.__InheritMap then\n        for UpType, _ in pairs(self.__InheritMap) do\n            o.__InheritMap[UpType] = true\n        end\n    end\n\n    setmetatable(o, {__index = self})\n    return o\nend\n\nfunction Class:IsSubObj(ObjType)\n    return self:GetTypeMap()[ObjType]\nend\n\nfunction Class:GetTypeMap()\n    local clsSelf = getmetatable(self)\n    if clsSelf then\n        local Temp = clsSelf.__index\n        if not Temp.__InheritSelf then\n            Temp.__InheritMap[Temp:GetType()] = true\n            Temp.__InheritSelf = true\n        end\n        return Temp.__InheritMap\n    end\n    return {}\nend\n\nfunction Class:New(...)\n    local o = {}\n    setmetatable(o, {__index = self})\n    if o.Ctor then o:Ctor(...) end --调用构造函数\n    return o\nend\n\nfunction Class:Ctor() end\nfunction Class:InClass() return true end\nfunction Class:OnCreate() end\nfunction Class:OnDestroy() end\nfunction Class:GetType()\treturn self.__ClassType end\n\n--获取一个class的父类\nfunction Super(Class)\n    return getmetatable(Class).__index\nend\n\n--判断一个类是否是类的子类 & 判断一个对象否是另一个类的实例\nfunction IsSub(Obj, Base)\n    local Temp = Obj\n    while  1 do     --循环回溯metatable\n        local mt = getmetatable(Temp)\n        if mt then\n            Temp = mt.__index\n            if Temp == Base then\n                return true\n            end\n        else\n            return false\n        end\n    end\nend\n```\n\n示例如下：\n\n```lua\nBase = Base or Class:Inherit(\"Base\")\n\nfunction Base:Test1()\n    print(\"Base Test1\")\nend\n\nfunction Base:Test2()\n    print(\"Base Test2\")\nend\n\nChild = Child or Base:Inherit(\"Child\")\n\nfunction Child:Test1()  --Child类重写了Test1方法\n    print(\"Child Test1\")\nend\n\nlocal a = Base:new()    --生成一个Base类的实例\na:Test1()               --将打印\"Base Test1\"\na:Test2()               --将打印\"Base Test2\"\n\nlocal b = Child:new()   --生成一个Child类的实例\nb:Test1()               --将打印\"Child Test1\"\nb:Test2()               --将打印\"Base Test2\",调用的是父类的方法\n```\n\n## 方案三\n\n这个是云风提供的方案：[博客地址](https://blog.codingnow.com/cloud/LuaOO)。\n\n```lua\nlocal _class={}\n \nfunction class(super)\n\tlocal class_type={}\n\tclass_type.ctor=false\n\tclass_type.super=super\n\tclass_type.new=function(...) \n\t\t\tlocal obj={}\n\t\t\tdo\n\t\t\t\tlocal create\n\t\t\t\tcreate = function(c,...)\n\t\t\t\t\tif c.super then\n\t\t\t\t\t\tcreate(c.super,...)\n\t\t\t\t\tend\n\t\t\t\t\tif c.ctor then\n\t\t\t\t\t\tc.ctor(obj,...)\n\t\t\t\t\tend\n\t\t\t\tend\n \n\t\t\t\tcreate(class_type,...)\n\t\t\tend\n\t\t\tsetmetatable(obj,{ __index=_class[class_type] })\n\t\t\treturn obj\n\t\tend\n\tlocal vtbl={}\n\t_class[class_type]=vtbl\n \n\tsetmetatable(class_type,{__newindex=\n\t\tfunction(t,k,v)\n\t\t\tvtbl[k]=v\n\t\tend\n\t})\n \n\tif super then\n\t\tsetmetatable(vtbl,{__index=\n\t\t\tfunction(t,k)\n\t\t\t\tlocal ret=_class[super][k]\n\t\t\t\tvtbl[k]=ret\n\t\t\t\treturn ret\n\t\t\tend\n\t\t})\n\tend\n \n\treturn class_type\nend\n```\n\n创建基类：\n\n```lua\nbase_type=class()\t\t\t-- 定义一个基类 base_type\n \nfunction base_type:ctor(x)\t-- 定义 base_type 的构造函数\n\tprint(\"base_type ctor\")\n\tself.x=x\nend\n \nfunction base_type:print_x()-- 定义一个成员函数 base_type:print_x\n\tprint(self.x)\nend\n \nfunction base_type:hello()\t-- 定义另一个成员函数 base_type:hello\n\tprint(\"hello base_type\")\nend\n```\n\n创建子类：\n\n```lua\ntest=class(base_type)\t-- 定义一个类 test 继承于 base_type\n \nfunction test:ctor()\t-- 定义 test 的构造函数\n\tprint(\"test ctor\")\nend\n \nfunction test:hello()\t-- 重载 base_type:hello 为 test:hello\n\tprint(\"hello test\")\nend\n```\n\n测试：\n\n```lua\na=test.new(1)\t-- 输出两行，base_type ctor 和 test ctor 。这个对象被正确的构造了。\na:print_x()\t\t-- 输出 1 ，这个是基类 base_type 中的成员函数。\na:hello()\t\t-- 输出 hello test ，这个函数被重载了。\n```\n\n","slug":"LuaOOP","published":1,"date":"2019-10-11T14:17:26.045Z","updated":"2019-10-11T14:17:26.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjgofpf20009cgu8a31b67rj","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>以下描述出自《Program in Lua》中文版：</p>\n<blockquote>\n<p>​        一些面向对象的语言中提供了类的概念，作为创建对象的模板。在这些语言里，对象是类的实例。Lua 不存在类的概念，每个对象定义他自己的行为并拥有自己的形状（shape）。然而，依据基于原型（prototype）的语言比如 Self 和 NewtonScript，在 Lua中仿效类的概念并不难。在这些语言中，对象没有类。相反，每个对象都有一个 prototype（原型），当调用不属于对象的某些操作时，会最先会到 prototype 中查找这些操作。在这类语言中实现类（class）的机制，我们创建一个对象，作为其它对象的原型即可（原型对象为类，其它对象为类的 instance）。类与 prototype 的工作机制相同，都是定义了特定对象的行为。</p>\n</blockquote>\n<h1 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h1><h2 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h2><p>Lua的作者之一<a href=\"https://en.wikipedia.org/wiki/Roberto_Ierusalimschy\">Roberto Lerusalimschy</a>在《Program in Lua》书中推荐了<a href=\"http://www.lua.org/pil/16.html\">一种实现LuaOO的方案</a>，这种方案很简单也很容易理解。</p>\n<p>在Lua里，类和实例都是table。在继承或实例化的时候，类会被赋值给实例或子类metatable的__index。</p>\n<p>核心代码其实就这几行：</p>\n<pre><code class=\"lua\">Class = &#123;&#125;\nfunction Class:new (o)\n    o = o or &#123;&#125;   -- create object if user does not provide one\n    setmetatable(o, self)\n    self.__index = self\n    return o\nend</code></pre>\n<p>具体的案例如下：</p>\n<pre><code class=\"lua\">Base = &#123;&#125;\nfunction Base:new (o)\n    o = o or &#123;&#125;   -- create object if user does not provide one\n    setmetatable(o, self)\n    self.__index = self\n    return o\nend\n\nfunction Base:Test1()\n    print(&quot;Base Test1&quot;)\nend\n\nfunction Base:Test2()\n    print(&quot;Base Test2&quot;)\nend\n\n--Child既可以说是Base类的实例，也可以说是Base类的子类，因为它们本质上都是table对象\nChild = Base:new()\n\nfunction Child:Test1() --Child类重写了Test1方法\n    print(&quot;Child Test1&quot;)\nend\n\nlocal a = Base:new()    --生成一个Base类的实例\na:Test1()               --将打印&quot;Base Test1&quot;\na:Test2()               --将打印&quot;Base Test2&quot;\n\nlocal b = Child:new()   --生成一个Child类的实例\nb:Test1()               --将打印&quot;Child Test1&quot;\nb:Test2()               --将打印&quot;Base Test2&quot;,调用的是父类的方法</code></pre>\n<h2 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h2><p>这个方案是我在工作中接触到的，算是方案一的升级版。</p>\n<p>核心代码如下：</p>\n<pre><code class=\"lua\">-- 所有类都会继承自这个类，真·基类\nClass = &#123;__ClassType = &quot;Class&quot;&#125;    \nALL_CLASS = ALL_CLASS or &#123;&#125;\n\nfunction Class:Inherit(ClassName, o)\n    o = o or &#123;&#125;\n    o.mt = &#123; __index = o&#125;\n    assert(ClassName, &quot;必须要有类名&quot;)\n    assert(not (ClassName and ALL_CLASS[ClassName]), string.format(&quot;该类已存在： %s&quot;, ClassName))\n\n    o.__ClassType = ClassName\n    ALL_CLASS[ClassName] = true\n\n    o.__InheritMap = &#123;[self:GetType()] = true &#125;  -- 记录继承类型\n    o.__InheritSelf = false\n    if self.__InheritMap then\n        for UpType, _ in pairs(self.__InheritMap) do\n            o.__InheritMap[UpType] = true\n        end\n    end\n\n    setmetatable(o, &#123;__index = self&#125;)\n    return o\nend\n\nfunction Class:IsSubObj(ObjType)\n    return self:GetTypeMap()[ObjType]\nend\n\nfunction Class:GetTypeMap()\n    local clsSelf = getmetatable(self)\n    if clsSelf then\n        local Temp = clsSelf.__index\n        if not Temp.__InheritSelf then\n            Temp.__InheritMap[Temp:GetType()] = true\n            Temp.__InheritSelf = true\n        end\n        return Temp.__InheritMap\n    end\n    return &#123;&#125;\nend\n\nfunction Class:New(...)\n    local o = &#123;&#125;\n    setmetatable(o, &#123;__index = self&#125;)\n    if o.Ctor then o:Ctor(...) end --调用构造函数\n    return o\nend\n\nfunction Class:Ctor() end\nfunction Class:InClass() return true end\nfunction Class:OnCreate() end\nfunction Class:OnDestroy() end\nfunction Class:GetType()    return self.__ClassType end\n\n--获取一个class的父类\nfunction Super(Class)\n    return getmetatable(Class).__index\nend\n\n--判断一个类是否是类的子类 &amp; 判断一个对象否是另一个类的实例\nfunction IsSub(Obj, Base)\n    local Temp = Obj\n    while  1 do     --循环回溯metatable\n        local mt = getmetatable(Temp)\n        if mt then\n            Temp = mt.__index\n            if Temp == Base then\n                return true\n            end\n        else\n            return false\n        end\n    end\nend</code></pre>\n<p>示例如下：</p>\n<pre><code class=\"lua\">Base = Base or Class:Inherit(&quot;Base&quot;)\n\nfunction Base:Test1()\n    print(&quot;Base Test1&quot;)\nend\n\nfunction Base:Test2()\n    print(&quot;Base Test2&quot;)\nend\n\nChild = Child or Base:Inherit(&quot;Child&quot;)\n\nfunction Child:Test1()  --Child类重写了Test1方法\n    print(&quot;Child Test1&quot;)\nend\n\nlocal a = Base:new()    --生成一个Base类的实例\na:Test1()               --将打印&quot;Base Test1&quot;\na:Test2()               --将打印&quot;Base Test2&quot;\n\nlocal b = Child:new()   --生成一个Child类的实例\nb:Test1()               --将打印&quot;Child Test1&quot;\nb:Test2()               --将打印&quot;Base Test2&quot;,调用的是父类的方法</code></pre>\n<h2 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h2><p>这个是云风提供的方案：<a href=\"https://blog.codingnow.com/cloud/LuaOO\">博客地址</a>。</p>\n<pre><code class=\"lua\">local _class=&#123;&#125;\n\nfunction class(super)\n    local class_type=&#123;&#125;\n    class_type.ctor=false\n    class_type.super=super\n    class_type.new=function(...) \n            local obj=&#123;&#125;\n            do\n                local create\n                create = function(c,...)\n                    if c.super then\n                        create(c.super,...)\n                    end\n                    if c.ctor then\n                        c.ctor(obj,...)\n                    end\n                end\n\n                create(class_type,...)\n            end\n            setmetatable(obj,&#123; __index=_class[class_type] &#125;)\n            return obj\n        end\n    local vtbl=&#123;&#125;\n    _class[class_type]=vtbl\n\n    setmetatable(class_type,&#123;__newindex=\n        function(t,k,v)\n            vtbl[k]=v\n        end\n    &#125;)\n\n    if super then\n        setmetatable(vtbl,&#123;__index=\n            function(t,k)\n                local ret=_class[super][k]\n                vtbl[k]=ret\n                return ret\n            end\n        &#125;)\n    end\n\n    return class_type\nend</code></pre>\n<p>创建基类：</p>\n<pre><code class=\"lua\">base_type=class()            -- 定义一个基类 base_type\n\nfunction base_type:ctor(x)    -- 定义 base_type 的构造函数\n    print(&quot;base_type ctor&quot;)\n    self.x=x\nend\n\nfunction base_type:print_x()-- 定义一个成员函数 base_type:print_x\n    print(self.x)\nend\n\nfunction base_type:hello()    -- 定义另一个成员函数 base_type:hello\n    print(&quot;hello base_type&quot;)\nend</code></pre>\n<p>创建子类：</p>\n<pre><code class=\"lua\">test=class(base_type)    -- 定义一个类 test 继承于 base_type\n\nfunction test:ctor()    -- 定义 test 的构造函数\n    print(&quot;test ctor&quot;)\nend\n\nfunction test:hello()    -- 重载 base_type:hello 为 test:hello\n    print(&quot;hello test&quot;)\nend</code></pre>\n<p>测试：</p>\n<pre><code class=\"lua\">a=test.new(1)    -- 输出两行，base_type ctor 和 test ctor 。这个对象被正确的构造了。\na:print_x()        -- 输出 1 ，这个是基类 base_type 中的成员函数。\na:hello()        -- 输出 hello test ，这个函数被重载了。</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>以下描述出自《Program in Lua》中文版：</p>\n<blockquote>\n<p>​        一些面向对象的语言中提供了类的概念，作为创建对象的模板。在这些语言里，对象是类的实例。Lua 不存在类的概念，每个对象定义他自己的行为并拥有自己的形状（shape）。然而，依据基于原型（prototype）的语言比如 Self 和 NewtonScript，在 Lua中仿效类的概念并不难。在这些语言中，对象没有类。相反，每个对象都有一个 prototype（原型），当调用不属于对象的某些操作时，会最先会到 prototype 中查找这些操作。在这类语言中实现类（class）的机制，我们创建一个对象，作为其它对象的原型即可（原型对象为类，其它对象为类的 instance）。类与 prototype 的工作机制相同，都是定义了特定对象的行为。</p>\n</blockquote>\n<h1 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h1><h2 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h2><p>Lua的作者之一<a href=\"https://en.wikipedia.org/wiki/Roberto_Ierusalimschy\">Roberto Lerusalimschy</a>在《Program in Lua》书中推荐了<a href=\"http://www.lua.org/pil/16.html\">一种实现LuaOO的方案</a>，这种方案很简单也很容易理解。</p>\n<p>在Lua里，类和实例都是table。在继承或实例化的时候，类会被赋值给实例或子类metatable的__index。</p>\n<p>核心代码其实就这几行：</p>\n<pre><code class=\"lua\">Class = &#123;&#125;\nfunction Class:new (o)\n    o = o or &#123;&#125;   -- create object if user does not provide one\n    setmetatable(o, self)\n    self.__index = self\n    return o\nend</code></pre>\n<p>具体的案例如下：</p>\n<pre><code class=\"lua\">Base = &#123;&#125;\nfunction Base:new (o)\n    o = o or &#123;&#125;   -- create object if user does not provide one\n    setmetatable(o, self)\n    self.__index = self\n    return o\nend\n\nfunction Base:Test1()\n    print(&quot;Base Test1&quot;)\nend\n\nfunction Base:Test2()\n    print(&quot;Base Test2&quot;)\nend\n\n--Child既可以说是Base类的实例，也可以说是Base类的子类，因为它们本质上都是table对象\nChild = Base:new()\n\nfunction Child:Test1() --Child类重写了Test1方法\n    print(&quot;Child Test1&quot;)\nend\n\nlocal a = Base:new()    --生成一个Base类的实例\na:Test1()               --将打印&quot;Base Test1&quot;\na:Test2()               --将打印&quot;Base Test2&quot;\n\nlocal b = Child:new()   --生成一个Child类的实例\nb:Test1()               --将打印&quot;Child Test1&quot;\nb:Test2()               --将打印&quot;Base Test2&quot;,调用的是父类的方法</code></pre>\n<h2 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h2><p>这个方案是我在工作中接触到的，算是方案一的升级版。</p>\n<p>核心代码如下：</p>\n<pre><code class=\"lua\">-- 所有类都会继承自这个类，真·基类\nClass = &#123;__ClassType = &quot;Class&quot;&#125;    \nALL_CLASS = ALL_CLASS or &#123;&#125;\n\nfunction Class:Inherit(ClassName, o)\n    o = o or &#123;&#125;\n    o.mt = &#123; __index = o&#125;\n    assert(ClassName, &quot;必须要有类名&quot;)\n    assert(not (ClassName and ALL_CLASS[ClassName]), string.format(&quot;该类已存在： %s&quot;, ClassName))\n\n    o.__ClassType = ClassName\n    ALL_CLASS[ClassName] = true\n\n    o.__InheritMap = &#123;[self:GetType()] = true &#125;  -- 记录继承类型\n    o.__InheritSelf = false\n    if self.__InheritMap then\n        for UpType, _ in pairs(self.__InheritMap) do\n            o.__InheritMap[UpType] = true\n        end\n    end\n\n    setmetatable(o, &#123;__index = self&#125;)\n    return o\nend\n\nfunction Class:IsSubObj(ObjType)\n    return self:GetTypeMap()[ObjType]\nend\n\nfunction Class:GetTypeMap()\n    local clsSelf = getmetatable(self)\n    if clsSelf then\n        local Temp = clsSelf.__index\n        if not Temp.__InheritSelf then\n            Temp.__InheritMap[Temp:GetType()] = true\n            Temp.__InheritSelf = true\n        end\n        return Temp.__InheritMap\n    end\n    return &#123;&#125;\nend\n\nfunction Class:New(...)\n    local o = &#123;&#125;\n    setmetatable(o, &#123;__index = self&#125;)\n    if o.Ctor then o:Ctor(...) end --调用构造函数\n    return o\nend\n\nfunction Class:Ctor() end\nfunction Class:InClass() return true end\nfunction Class:OnCreate() end\nfunction Class:OnDestroy() end\nfunction Class:GetType()    return self.__ClassType end\n\n--获取一个class的父类\nfunction Super(Class)\n    return getmetatable(Class).__index\nend\n\n--判断一个类是否是类的子类 &amp; 判断一个对象否是另一个类的实例\nfunction IsSub(Obj, Base)\n    local Temp = Obj\n    while  1 do     --循环回溯metatable\n        local mt = getmetatable(Temp)\n        if mt then\n            Temp = mt.__index\n            if Temp == Base then\n                return true\n            end\n        else\n            return false\n        end\n    end\nend</code></pre>\n<p>示例如下：</p>\n<pre><code class=\"lua\">Base = Base or Class:Inherit(&quot;Base&quot;)\n\nfunction Base:Test1()\n    print(&quot;Base Test1&quot;)\nend\n\nfunction Base:Test2()\n    print(&quot;Base Test2&quot;)\nend\n\nChild = Child or Base:Inherit(&quot;Child&quot;)\n\nfunction Child:Test1()  --Child类重写了Test1方法\n    print(&quot;Child Test1&quot;)\nend\n\nlocal a = Base:new()    --生成一个Base类的实例\na:Test1()               --将打印&quot;Base Test1&quot;\na:Test2()               --将打印&quot;Base Test2&quot;\n\nlocal b = Child:new()   --生成一个Child类的实例\nb:Test1()               --将打印&quot;Child Test1&quot;\nb:Test2()               --将打印&quot;Base Test2&quot;,调用的是父类的方法</code></pre>\n<h2 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h2><p>这个是云风提供的方案：<a href=\"https://blog.codingnow.com/cloud/LuaOO\">博客地址</a>。</p>\n<pre><code class=\"lua\">local _class=&#123;&#125;\n\nfunction class(super)\n    local class_type=&#123;&#125;\n    class_type.ctor=false\n    class_type.super=super\n    class_type.new=function(...) \n            local obj=&#123;&#125;\n            do\n                local create\n                create = function(c,...)\n                    if c.super then\n                        create(c.super,...)\n                    end\n                    if c.ctor then\n                        c.ctor(obj,...)\n                    end\n                end\n\n                create(class_type,...)\n            end\n            setmetatable(obj,&#123; __index=_class[class_type] &#125;)\n            return obj\n        end\n    local vtbl=&#123;&#125;\n    _class[class_type]=vtbl\n\n    setmetatable(class_type,&#123;__newindex=\n        function(t,k,v)\n            vtbl[k]=v\n        end\n    &#125;)\n\n    if super then\n        setmetatable(vtbl,&#123;__index=\n            function(t,k)\n                local ret=_class[super][k]\n                vtbl[k]=ret\n                return ret\n            end\n        &#125;)\n    end\n\n    return class_type\nend</code></pre>\n<p>创建基类：</p>\n<pre><code class=\"lua\">base_type=class()            -- 定义一个基类 base_type\n\nfunction base_type:ctor(x)    -- 定义 base_type 的构造函数\n    print(&quot;base_type ctor&quot;)\n    self.x=x\nend\n\nfunction base_type:print_x()-- 定义一个成员函数 base_type:print_x\n    print(self.x)\nend\n\nfunction base_type:hello()    -- 定义另一个成员函数 base_type:hello\n    print(&quot;hello base_type&quot;)\nend</code></pre>\n<p>创建子类：</p>\n<pre><code class=\"lua\">test=class(base_type)    -- 定义一个类 test 继承于 base_type\n\nfunction test:ctor()    -- 定义 test 的构造函数\n    print(&quot;test ctor&quot;)\nend\n\nfunction test:hello()    -- 重载 base_type:hello 为 test:hello\n    print(&quot;hello test&quot;)\nend</code></pre>\n<p>测试：</p>\n<pre><code class=\"lua\">a=test.new(1)    -- 输出两行，base_type ctor 和 test ctor 。这个对象被正确的构造了。\na:print_x()        -- 输出 1 ，这个是基类 base_type 中的成员函数。\na:hello()        -- 输出 hello test ，这个函数被重载了。</code></pre>\n"},{"title":"Lua源码笔记","_content":"\n# 概述\n\n用Lua开发游戏已经有一段时间了，但是对Lua的理解还一直停留在浅层。最近想深入研究下，于是着手开始看Lua源码，并在本文记录知识点。\n\n## 模块 \n\n### GC\n\n#### 1.基本数据结构\n\nLua的基本数据结构是一个类型union+type。相关的核心代码如下：\n\n~~~c++\n/*\n** Common type for all collectable objects\n*/\ntypedef struct GCObject GCObject;\n\n/*\n** Common Header for all collectable objects (in macro form, to be\n** included in other objects)\n*/\n#define CommonHeader \\\n\tGCObject *next;  \\\n\tlu_byte tt;      \\\n\tlu_byte marked\n\n/*\n** Common type has only the common header\n*/\nstruct GCObject\n{\n\tCommonHeader;\n};\n\n/*\n** Tagged Values. This is the basic representation of values in Lua,\n** an actual value plus a tag with its type.\n*/\n\n/*\n** Union of all Lua values\n*/\ntypedef union Value {\n\tGCObject *gc;\t/* collectable objects */\n\tvoid *p;\t\t /* light userdata */\n\tint b;\t\t\t /* booleans */\n\tlua_CFunction f; /* light C functions */\n\tlua_Integer i;   /* integer numbers */\n\tlua_Number n;\t/* float numbers */\n} Value;\n\n#define TValuefields \\\n\tValue value_;    \\\n\tint tt_\n\ntypedef struct lua_TValue\n{\n\tTValuefields;\n} TValue;\n~~~\n\n#### 2.GC算法和流程\n\n1. 双色标记清除算法\n\n   在Lua5.0中的GC，是一次性不可被打断的操作，执行的算法是Mark-and-sweep算法，在执行GC操作的时候，会设置2种颜色，黑色和白色，然后执行GC的流程，大体的伪代码流程如下:\n\n   ~~~\n   每个新创建的对象为白色\n   \n   //初始化阶段\n   遍历root链表中的对象，并将其加入到对象链表中    \n   \n   //标记阶段   \n   当前对象链表中还有未被扫描的元素:    \n       从中取出对象并将其标记为黑色   \n       遍历这个对象关联的其他所有对象: \n           标记为黑色\n           \n   //回收阶段\n   遍历所有对象:   \n       如果为白色:   \n           这些对象没有被引用，则执行回收\n       否则: \n           这些对象仍然被引用，需要保留\n   ~~~\n\n   整个过程是不能被打断的，这是为了避免一种情况：\n   如果可以被打断，在GC的过程中新创建一个对象\n   那么如果标记为白色，此时处于回收阶段，那么这个对象没有被扫描就会被回收；\n   如果标记为黑色，此时处于回收阶段，那么这个对象没有被扫描就会被保留\n   两种情况都不适合，所以只有让整个过程不可被打断，带来的问题就是造成gc的时候卡顿\n\n2. 三色标记清除算法\n\n   虽然是三色，本质是四色，颜色分为三种:\n\n   **白色:** 当前对象为待访问状态，表示对象还未被gc标记过，也就是对象创建的初始状态； 同理，如果在gc完成后，仍然为白色，则说明当前对象没有被引用，则可以被清除回收\n\n   **灰色:** 当前对象为待扫描状态，当前对象已经被扫描过，但是其引用的其他对象没有被扫描\n\n   **黑色:** 当前对象已经扫描过，并且其引用的其他对象也被扫描过\n\n   其流程伪代码:\n\n   ~~~\n   每个新创建的对象为白色\n   \n   //初始化阶段   \n   遍历root阶段中引用的对象，从白色设置为灰色，并放入到灰色节点列表中   \n   \n   //标记阶段    \n   当灰色链表中还有未被扫描的元素:    \n       从中去除一个对象并将其标记为黑色   \n       遍历这个对象关联的其他所有对象:   \n           如果是白色:\n               标记为灰色，并加入灰色链表中   \n               \n   //回收阶段  \n   遍历所有对象:   \n       如果为白色: \n           这些对象没有被引用，需要被回收\n       否则:\n           重新加入对象链表中等待下次gc   \n   ~~~\n\n   整个标记过程是可以被打断的，被打断后回来只需要接着执行标记过程即可，回收阶段是不可被打断的。\n\n   如何解决在标记阶段之后创建的对象为白色的问题?\n   分裂白色为两种白色，一种为当前白色 currentwhite， 一种为非当前白色 otherwhite，新创建的对象都为otherwhite，则在执行回收的时候，如果为otherwhite则不执行回收操作，等待下次gc的时候，会执行白色的轮换，则新创建的对象会进入下一轮GC。\n\n\n\n","source":"_posts/LuaSource.md","raw":"---\ntitle: Lua源码笔记\ntags: Lua\ncategories: 学习笔记\n---\n\n# 概述\n\n用Lua开发游戏已经有一段时间了，但是对Lua的理解还一直停留在浅层。最近想深入研究下，于是着手开始看Lua源码，并在本文记录知识点。\n\n## 模块 \n\n### GC\n\n#### 1.基本数据结构\n\nLua的基本数据结构是一个类型union+type。相关的核心代码如下：\n\n~~~c++\n/*\n** Common type for all collectable objects\n*/\ntypedef struct GCObject GCObject;\n\n/*\n** Common Header for all collectable objects (in macro form, to be\n** included in other objects)\n*/\n#define CommonHeader \\\n\tGCObject *next;  \\\n\tlu_byte tt;      \\\n\tlu_byte marked\n\n/*\n** Common type has only the common header\n*/\nstruct GCObject\n{\n\tCommonHeader;\n};\n\n/*\n** Tagged Values. This is the basic representation of values in Lua,\n** an actual value plus a tag with its type.\n*/\n\n/*\n** Union of all Lua values\n*/\ntypedef union Value {\n\tGCObject *gc;\t/* collectable objects */\n\tvoid *p;\t\t /* light userdata */\n\tint b;\t\t\t /* booleans */\n\tlua_CFunction f; /* light C functions */\n\tlua_Integer i;   /* integer numbers */\n\tlua_Number n;\t/* float numbers */\n} Value;\n\n#define TValuefields \\\n\tValue value_;    \\\n\tint tt_\n\ntypedef struct lua_TValue\n{\n\tTValuefields;\n} TValue;\n~~~\n\n#### 2.GC算法和流程\n\n1. 双色标记清除算法\n\n   在Lua5.0中的GC，是一次性不可被打断的操作，执行的算法是Mark-and-sweep算法，在执行GC操作的时候，会设置2种颜色，黑色和白色，然后执行GC的流程，大体的伪代码流程如下:\n\n   ~~~\n   每个新创建的对象为白色\n   \n   //初始化阶段\n   遍历root链表中的对象，并将其加入到对象链表中    \n   \n   //标记阶段   \n   当前对象链表中还有未被扫描的元素:    \n       从中取出对象并将其标记为黑色   \n       遍历这个对象关联的其他所有对象: \n           标记为黑色\n           \n   //回收阶段\n   遍历所有对象:   \n       如果为白色:   \n           这些对象没有被引用，则执行回收\n       否则: \n           这些对象仍然被引用，需要保留\n   ~~~\n\n   整个过程是不能被打断的，这是为了避免一种情况：\n   如果可以被打断，在GC的过程中新创建一个对象\n   那么如果标记为白色，此时处于回收阶段，那么这个对象没有被扫描就会被回收；\n   如果标记为黑色，此时处于回收阶段，那么这个对象没有被扫描就会被保留\n   两种情况都不适合，所以只有让整个过程不可被打断，带来的问题就是造成gc的时候卡顿\n\n2. 三色标记清除算法\n\n   虽然是三色，本质是四色，颜色分为三种:\n\n   **白色:** 当前对象为待访问状态，表示对象还未被gc标记过，也就是对象创建的初始状态； 同理，如果在gc完成后，仍然为白色，则说明当前对象没有被引用，则可以被清除回收\n\n   **灰色:** 当前对象为待扫描状态，当前对象已经被扫描过，但是其引用的其他对象没有被扫描\n\n   **黑色:** 当前对象已经扫描过，并且其引用的其他对象也被扫描过\n\n   其流程伪代码:\n\n   ~~~\n   每个新创建的对象为白色\n   \n   //初始化阶段   \n   遍历root阶段中引用的对象，从白色设置为灰色，并放入到灰色节点列表中   \n   \n   //标记阶段    \n   当灰色链表中还有未被扫描的元素:    \n       从中去除一个对象并将其标记为黑色   \n       遍历这个对象关联的其他所有对象:   \n           如果是白色:\n               标记为灰色，并加入灰色链表中   \n               \n   //回收阶段  \n   遍历所有对象:   \n       如果为白色: \n           这些对象没有被引用，需要被回收\n       否则:\n           重新加入对象链表中等待下次gc   \n   ~~~\n\n   整个标记过程是可以被打断的，被打断后回来只需要接着执行标记过程即可，回收阶段是不可被打断的。\n\n   如何解决在标记阶段之后创建的对象为白色的问题?\n   分裂白色为两种白色，一种为当前白色 currentwhite， 一种为非当前白色 otherwhite，新创建的对象都为otherwhite，则在执行回收的时候，如果为otherwhite则不执行回收操作，等待下次gc的时候，会执行白色的轮换，则新创建的对象会进入下一轮GC。\n\n\n\n","slug":"LuaSource","published":1,"date":"2020-01-15T14:32:06.712Z","updated":"2020-01-15T14:32:06.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjgofpf3000bcgu8h7udhpxy","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>用Lua开发游戏已经有一段时间了，但是对Lua的理解还一直停留在浅层。最近想深入研究下，于是着手开始看Lua源码，并在本文记录知识点。</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><h3 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h3><h4 id=\"1-基本数据结构\"><a href=\"#1-基本数据结构\" class=\"headerlink\" title=\"1.基本数据结构\"></a>1.基本数据结构</h4><p>Lua的基本数据结构是一个类型union+type。相关的核心代码如下：</p>\n<pre><code class=\"c++\">/*\n** Common type for all collectable objects\n*/\ntypedef struct GCObject GCObject;\n\n/*\n** Common Header for all collectable objects (in macro form, to be\n** included in other objects)\n*/\n#define CommonHeader \\\n    GCObject *next;  \\\n    lu_byte tt;      \\\n    lu_byte marked\n\n/*\n** Common type has only the common header\n*/\nstruct GCObject\n&#123;\n    CommonHeader;\n&#125;;\n\n/*\n** Tagged Values. This is the basic representation of values in Lua,\n** an actual value plus a tag with its type.\n*/\n\n/*\n** Union of all Lua values\n*/\ntypedef union Value &#123;\n    GCObject *gc;    /* collectable objects */\n    void *p;         /* light userdata */\n    int b;             /* booleans */\n    lua_CFunction f; /* light C functions */\n    lua_Integer i;   /* integer numbers */\n    lua_Number n;    /* float numbers */\n&#125; Value;\n\n#define TValuefields \\\n    Value value_;    \\\n    int tt_\n\ntypedef struct lua_TValue\n&#123;\n    TValuefields;\n&#125; TValue;</code></pre>\n<h4 id=\"2-GC算法和流程\"><a href=\"#2-GC算法和流程\" class=\"headerlink\" title=\"2.GC算法和流程\"></a>2.GC算法和流程</h4><ol>\n<li><p>双色标记清除算法</p>\n<p>在Lua5.0中的GC，是一次性不可被打断的操作，执行的算法是Mark-and-sweep算法，在执行GC操作的时候，会设置2种颜色，黑色和白色，然后执行GC的流程，大体的伪代码流程如下:</p>\n<pre><code>每个新创建的对象为白色\n\n//初始化阶段\n遍历root链表中的对象，并将其加入到对象链表中    \n\n//标记阶段   \n当前对象链表中还有未被扫描的元素:    \n    从中取出对象并将其标记为黑色   \n    遍历这个对象关联的其他所有对象: \n        标记为黑色\n\n//回收阶段\n遍历所有对象:   \n    如果为白色:   \n        这些对象没有被引用，则执行回收\n    否则: \n        这些对象仍然被引用，需要保留</code></pre><p>整个过程是不能被打断的，这是为了避免一种情况：<br>如果可以被打断，在GC的过程中新创建一个对象<br>那么如果标记为白色，此时处于回收阶段，那么这个对象没有被扫描就会被回收；<br>如果标记为黑色，此时处于回收阶段，那么这个对象没有被扫描就会被保留<br>两种情况都不适合，所以只有让整个过程不可被打断，带来的问题就是造成gc的时候卡顿</p>\n</li>\n<li><p>三色标记清除算法</p>\n<p>虽然是三色，本质是四色，颜色分为三种:</p>\n<p><strong>白色:</strong> 当前对象为待访问状态，表示对象还未被gc标记过，也就是对象创建的初始状态； 同理，如果在gc完成后，仍然为白色，则说明当前对象没有被引用，则可以被清除回收</p>\n<p><strong>灰色:</strong> 当前对象为待扫描状态，当前对象已经被扫描过，但是其引用的其他对象没有被扫描</p>\n<p><strong>黑色:</strong> 当前对象已经扫描过，并且其引用的其他对象也被扫描过</p>\n<p>其流程伪代码:</p>\n<pre><code>每个新创建的对象为白色\n\n//初始化阶段   \n遍历root阶段中引用的对象，从白色设置为灰色，并放入到灰色节点列表中   \n\n//标记阶段    \n当灰色链表中还有未被扫描的元素:    \n    从中去除一个对象并将其标记为黑色   \n    遍历这个对象关联的其他所有对象:   \n        如果是白色:\n            标记为灰色，并加入灰色链表中   \n\n//回收阶段  \n遍历所有对象:   \n    如果为白色: \n        这些对象没有被引用，需要被回收\n    否则:\n        重新加入对象链表中等待下次gc   </code></pre><p>整个标记过程是可以被打断的，被打断后回来只需要接着执行标记过程即可，回收阶段是不可被打断的。</p>\n<p>如何解决在标记阶段之后创建的对象为白色的问题?<br>分裂白色为两种白色，一种为当前白色 currentwhite， 一种为非当前白色 otherwhite，新创建的对象都为otherwhite，则在执行回收的时候，如果为otherwhite则不执行回收操作，等待下次gc的时候，会执行白色的轮换，则新创建的对象会进入下一轮GC。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>用Lua开发游戏已经有一段时间了，但是对Lua的理解还一直停留在浅层。最近想深入研究下，于是着手开始看Lua源码，并在本文记录知识点。</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><h3 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h3><h4 id=\"1-基本数据结构\"><a href=\"#1-基本数据结构\" class=\"headerlink\" title=\"1.基本数据结构\"></a>1.基本数据结构</h4><p>Lua的基本数据结构是一个类型union+type。相关的核心代码如下：</p>\n<pre><code class=\"c++\">/*\n** Common type for all collectable objects\n*/\ntypedef struct GCObject GCObject;\n\n/*\n** Common Header for all collectable objects (in macro form, to be\n** included in other objects)\n*/\n#define CommonHeader \\\n    GCObject *next;  \\\n    lu_byte tt;      \\\n    lu_byte marked\n\n/*\n** Common type has only the common header\n*/\nstruct GCObject\n&#123;\n    CommonHeader;\n&#125;;\n\n/*\n** Tagged Values. This is the basic representation of values in Lua,\n** an actual value plus a tag with its type.\n*/\n\n/*\n** Union of all Lua values\n*/\ntypedef union Value &#123;\n    GCObject *gc;    /* collectable objects */\n    void *p;         /* light userdata */\n    int b;             /* booleans */\n    lua_CFunction f; /* light C functions */\n    lua_Integer i;   /* integer numbers */\n    lua_Number n;    /* float numbers */\n&#125; Value;\n\n#define TValuefields \\\n    Value value_;    \\\n    int tt_\n\ntypedef struct lua_TValue\n&#123;\n    TValuefields;\n&#125; TValue;</code></pre>\n<h4 id=\"2-GC算法和流程\"><a href=\"#2-GC算法和流程\" class=\"headerlink\" title=\"2.GC算法和流程\"></a>2.GC算法和流程</h4><ol>\n<li><p>双色标记清除算法</p>\n<p>在Lua5.0中的GC，是一次性不可被打断的操作，执行的算法是Mark-and-sweep算法，在执行GC操作的时候，会设置2种颜色，黑色和白色，然后执行GC的流程，大体的伪代码流程如下:</p>\n<pre><code>每个新创建的对象为白色\n\n//初始化阶段\n遍历root链表中的对象，并将其加入到对象链表中    \n\n//标记阶段   \n当前对象链表中还有未被扫描的元素:    \n    从中取出对象并将其标记为黑色   \n    遍历这个对象关联的其他所有对象: \n        标记为黑色\n\n//回收阶段\n遍历所有对象:   \n    如果为白色:   \n        这些对象没有被引用，则执行回收\n    否则: \n        这些对象仍然被引用，需要保留</code></pre><p>整个过程是不能被打断的，这是为了避免一种情况：<br>如果可以被打断，在GC的过程中新创建一个对象<br>那么如果标记为白色，此时处于回收阶段，那么这个对象没有被扫描就会被回收；<br>如果标记为黑色，此时处于回收阶段，那么这个对象没有被扫描就会被保留<br>两种情况都不适合，所以只有让整个过程不可被打断，带来的问题就是造成gc的时候卡顿</p>\n</li>\n<li><p>三色标记清除算法</p>\n<p>虽然是三色，本质是四色，颜色分为三种:</p>\n<p><strong>白色:</strong> 当前对象为待访问状态，表示对象还未被gc标记过，也就是对象创建的初始状态； 同理，如果在gc完成后，仍然为白色，则说明当前对象没有被引用，则可以被清除回收</p>\n<p><strong>灰色:</strong> 当前对象为待扫描状态，当前对象已经被扫描过，但是其引用的其他对象没有被扫描</p>\n<p><strong>黑色:</strong> 当前对象已经扫描过，并且其引用的其他对象也被扫描过</p>\n<p>其流程伪代码:</p>\n<pre><code>每个新创建的对象为白色\n\n//初始化阶段   \n遍历root阶段中引用的对象，从白色设置为灰色，并放入到灰色节点列表中   \n\n//标记阶段    \n当灰色链表中还有未被扫描的元素:    \n    从中去除一个对象并将其标记为黑色   \n    遍历这个对象关联的其他所有对象:   \n        如果是白色:\n            标记为灰色，并加入灰色链表中   \n\n//回收阶段  \n遍历所有对象:   \n    如果为白色: \n        这些对象没有被引用，需要被回收\n    否则:\n        重新加入对象链表中等待下次gc   </code></pre><p>整个标记过程是可以被打断的，被打断后回来只需要接着执行标记过程即可，回收阶段是不可被打断的。</p>\n<p>如何解决在标记阶段之后创建的对象为白色的问题?<br>分裂白色为两种白色，一种为当前白色 currentwhite， 一种为非当前白色 otherwhite，新创建的对象都为otherwhite，则在执行回收的时候，如果为otherwhite则不执行回收操作，等待下次gc的时候，会执行白色的轮换，则新创建的对象会进入下一轮GC。</p>\n</li>\n</ol>\n"},{"title":"单例模式","_content":"\n# 单例模式\n\n>  保证一个类只有一个实例，并且提供了访问该实例的全局访问点。\n\n单例模式或许是游戏开发中最常用的设计模式了。\n在开发游戏时，开发者通常会为每个子系统定义单例类。\n这些单例类负责统一管理某个系统，通常被称为管理器（manager）。\n例如常见的UI管理器（UIManager）、场景管理器（SceneManager）等。\n\n## 描述\n\n- **保证一个类只有一个实例。**有时候，如果类存在多个实例就不能正确的运行。这种类的特点是，对这些类进行调用的时候必须接触之前所有的操作。如果这些操作的发生在不同的实例，一个实例就无法知道另一个实例的操作，也就无法正常地运行了。\n- **提供了访问该实例的全局访问点。**有时候，游戏中的不同系统都会使用同一个类。 如果这些系统不能创建这个类的实例，那这个类就需要提供获取它实例的全局方法。\n\n## 实现\n\n[GPP（Game Programming Patterns）](https://gpp.tkchu.me/singleton.html)中以一个文件系统封装类作为例子。\n\n经典的C++实现方案:\n```C++\nclass FileSystem\n{\npublic:\n\tstatic FileSystem& instance()\n\t{\n\t\t// 惰性初始化\n\t\tif (instance_ == NULL) instance_ = new FileSystem();\n\t\treturn *instance_;\n\t}\n\nprivate:\n\tFileSystem() {}\n\n\tstatic FileSystem* instance_;\n};\n```\n\n静态的`instance_`成员保存了一个类的实例， 私有的构造器保证了它是**唯一**的。 公开的静态方法`instance()`让任何地方的代码都能访问实例。 在首次被请求时，它同样负责惰性实例化该单例。 \n\n线程安全的现代C++实现方案：\n\n```C++\nclass FileSystem\n{\npublic:\n\tstatic FileSystem& instance()\n\t{\n\t\tstatic FileSystem* instance = new FileSystem();\n\t\treturn *instance;\n\t}\n\nprivate:\n\tFileSystem() {}\n};\n```\n\n## 为什么我们使用它\n\n-  **如果没人用，就不必创建实例。** 这种惰性初始化为节约内存和CPU资源带来了好处。\n\n-  **它在运行时实例化。** 单例通常的替代方案是使用含有静态成员变量的类，但是静态成员是自动初始化的。编译器在main()运行前初始化静态变量，而且初始化的顺序不可控，这意味着它们的相互依赖不可靠。而单例模式的惰性初始化没有这个问题。\n\n-  **可继承单例。**  单例可继承。这意味着单例模式可以配合多态性写出优美的代码。核心代码如下：\n\n  ```lua\n  class FileSystem\n  {\n  public:\n  \tstatic FileSystem& instance();\n  \n  \tvirtual ~FileSystem() {}\n  \tvirtual char* readFile(char* path) = 0;\n  \tvirtual void  writeFile(char* path, char* contents) = 0;\n  \n  protected:\n  \tFileSystem() {}\n  };\n  \n  FileSystem& FileSystem::instance()\n  {\n  #if PLATFORM == PLAYSTATION3\n  \tstatic FileSystem * instance = new PS3FileSystem();\n  #elif PLATFORM == WII\n  \tstatic FileSystem * instance = new WiiFileSystem();\n  #endif\n  \treturn *instance;\n  }\n  ```\n\n   通过一个简单的编译器转换，我们把文件系统包装类绑定到合适的具体类型上。 整个代码库都可以使用`FileSystem::instance()`接触到文件系统，而无需和任何平台相关的代码耦合。耦合发生在为特定平台写的`FileSystem`类实现文件中。 \n\n## 为什么我们后悔使用它\n\n- **它是一个全局变量**\n\n  - 让理解更加困难：全局变量的使用让我们除了关心当前函数之外，还需要关心全局变量的状态。而由于全局变量的全局访问性，我们可能要追踪整个代码库才能找到某个静态变量在什么地方被赋予了错误的值。\n  - 促进了耦合的发生：全局变量具有全局可见性，新手程序员可以会在单例中#include 包含了其他模块的头文件。新手程序员用这种方法顺利地完成了任务，却破坏了框架留下了耦合。如果不用全局实例，那他这样做的时候将会遇到阻碍，这种阻碍会提醒他不该这样做。 通过控制对实例的访问，你控制了耦合。\n  - 对并行不友好： 当我们将某些东西转为全局变量时，我们创建了一块每个线程都能看到并访问的内存， 却不知道其他线程是否正在使用那块内存。 这种方式带来了死锁，竞争状态，以及其他很难解决的线程同步问题。\n\n- **它能在你只有一个问题的时候解决两个**\n\n  正如之前的描述里写的，单例模式解决了两个问题。如果我们只有其中一个问题呢？ 保证实例是唯一存在的是很有用的，但是谁告诉我们要让每个人都能接触到它？ 同样，全局接触很方便，但是必须禁止存在多个实例吗？这是一个奇怪的约束，比如我们为了便利的访问把一个类改成了单例，却发现这个类无法创建不同的实例了。\n\n- **惰性初始化从你那里剥夺了控制权**\n\n  - 如果初始化很耗时，而初始化发生在游戏的高潮部分，会导致可见的掉帧和断续的游戏体验 。\n  -  游戏通常需要严格管理在堆上分配的内存来避免碎片。如果系统在初始化时分配到了堆上。我们需要知道初始化在何时发生， 这样我们才可以控制内存待在堆的哪里。  \n\n## 那该如何是好\n\n- **看看你是不是真正地需要类**\n\n  有些时候我们并不需要管理器来管理某些对象，而是让这些对象管理自己。\n\n- **将类限制为单一的实例**\n\n  我们可以通过别的方法保证一个类只有单一实例，比如用一个bool值记录，而无需提供全局的接触点。\n\n- **为了给实例提供方便的访问方法**\n\n  - 传进来：在用其他更加繁杂的方法前，考虑一下这个解决方案。 \n\n  - 从基类中获得：很多游戏架构有浅层但是宽泛的继承层次，通常只有一层深。举个例子，你也许有`GameObject`基类，每个游戏中的敌人或者对象都继承它。使用这样的架构，很大一部分游戏代码会存在于这些“子”推导类中。这就意味着这些类已经有了对同样事物的相同获取方法：它们的`GameObject`基类。我们可以利用这点： \n\n    ```c++\n    class GameObject\n    {\n    protected:\n    \tLog& getLog() { return log_; }\n    \n    private:\n    \tstatic Log& log_;\n    };\n    \n    class Enemy : public GameObject\n    {\n    \tvoid doSomething()\n    \t{\n    \t\tgetLog().write(\"I can log!\");\n    \t}\n    };\n    ```\n\n  - 从已经是全局的东西中获取： 大多数代码库仍有一些全局可用对象，比如一个代表了整个游戏状态的`Game`或`World`对象。我们可以让现有的全局对象捎带需要的东西，来减少全局变量类的数目。不让`Log`，`FileSystem`和`AudioPlayer`都变成单例，而是这样做：\n\n    ```c++\n    class Game\n    {\n    public:\n    \tstatic Game& instance() { return instance_; }\n    \n    \t// 设置log_, et. al. ……\n    \n    \tLog& getLog() { return *log_; }\n    \tFileSystem& getFileSystem() { return *fileSystem_; }\n    \tAudioPlayer& getAudioPlayer() { return *audioPlayer_; }\n    \n    private:\n    \tstatic Game instance_;\n    \n    \tLog* log_;\n    \tFileSystem* fileSystem_;\n    \tAudioPlayer* audioPlayer_;\n    };\n    ```\n\n  - 从服务定位器中获得： 定义一个类，存在的唯一目标就是为对象提供全局访问。 这种常见的模式被称为服务器定位模式，[有单独讲它的章节]( https://gpp.tkchu.me/service-locator.html )。\n\n## Lua中的实现\n\n```lua\nSingleton = {}\nfunction Singleton:new(o)\n    o = o or {}\n    setmetatable(o,self)\n    self.__index = self\n    return o\nend\n\nfunction Singleton:Instance()\n    if not self.instance then\n        self.instance = self:new()\n    end\n    return self.instance\nend\n\ns1 = Singleton:Instance()\ns2 = Singleton:Instance()\nif s1 == s2 then\n    print(\"两个对象是相同的实例\")\nend\n```\n","source":"_posts/Singleton.md","raw":"---\ntitle: 单例模式\ntags: 设计模式\ncategories: 学习笔记\n---\n\n# 单例模式\n\n>  保证一个类只有一个实例，并且提供了访问该实例的全局访问点。\n\n单例模式或许是游戏开发中最常用的设计模式了。\n在开发游戏时，开发者通常会为每个子系统定义单例类。\n这些单例类负责统一管理某个系统，通常被称为管理器（manager）。\n例如常见的UI管理器（UIManager）、场景管理器（SceneManager）等。\n\n## 描述\n\n- **保证一个类只有一个实例。**有时候，如果类存在多个实例就不能正确的运行。这种类的特点是，对这些类进行调用的时候必须接触之前所有的操作。如果这些操作的发生在不同的实例，一个实例就无法知道另一个实例的操作，也就无法正常地运行了。\n- **提供了访问该实例的全局访问点。**有时候，游戏中的不同系统都会使用同一个类。 如果这些系统不能创建这个类的实例，那这个类就需要提供获取它实例的全局方法。\n\n## 实现\n\n[GPP（Game Programming Patterns）](https://gpp.tkchu.me/singleton.html)中以一个文件系统封装类作为例子。\n\n经典的C++实现方案:\n```C++\nclass FileSystem\n{\npublic:\n\tstatic FileSystem& instance()\n\t{\n\t\t// 惰性初始化\n\t\tif (instance_ == NULL) instance_ = new FileSystem();\n\t\treturn *instance_;\n\t}\n\nprivate:\n\tFileSystem() {}\n\n\tstatic FileSystem* instance_;\n};\n```\n\n静态的`instance_`成员保存了一个类的实例， 私有的构造器保证了它是**唯一**的。 公开的静态方法`instance()`让任何地方的代码都能访问实例。 在首次被请求时，它同样负责惰性实例化该单例。 \n\n线程安全的现代C++实现方案：\n\n```C++\nclass FileSystem\n{\npublic:\n\tstatic FileSystem& instance()\n\t{\n\t\tstatic FileSystem* instance = new FileSystem();\n\t\treturn *instance;\n\t}\n\nprivate:\n\tFileSystem() {}\n};\n```\n\n## 为什么我们使用它\n\n-  **如果没人用，就不必创建实例。** 这种惰性初始化为节约内存和CPU资源带来了好处。\n\n-  **它在运行时实例化。** 单例通常的替代方案是使用含有静态成员变量的类，但是静态成员是自动初始化的。编译器在main()运行前初始化静态变量，而且初始化的顺序不可控，这意味着它们的相互依赖不可靠。而单例模式的惰性初始化没有这个问题。\n\n-  **可继承单例。**  单例可继承。这意味着单例模式可以配合多态性写出优美的代码。核心代码如下：\n\n  ```lua\n  class FileSystem\n  {\n  public:\n  \tstatic FileSystem& instance();\n  \n  \tvirtual ~FileSystem() {}\n  \tvirtual char* readFile(char* path) = 0;\n  \tvirtual void  writeFile(char* path, char* contents) = 0;\n  \n  protected:\n  \tFileSystem() {}\n  };\n  \n  FileSystem& FileSystem::instance()\n  {\n  #if PLATFORM == PLAYSTATION3\n  \tstatic FileSystem * instance = new PS3FileSystem();\n  #elif PLATFORM == WII\n  \tstatic FileSystem * instance = new WiiFileSystem();\n  #endif\n  \treturn *instance;\n  }\n  ```\n\n   通过一个简单的编译器转换，我们把文件系统包装类绑定到合适的具体类型上。 整个代码库都可以使用`FileSystem::instance()`接触到文件系统，而无需和任何平台相关的代码耦合。耦合发生在为特定平台写的`FileSystem`类实现文件中。 \n\n## 为什么我们后悔使用它\n\n- **它是一个全局变量**\n\n  - 让理解更加困难：全局变量的使用让我们除了关心当前函数之外，还需要关心全局变量的状态。而由于全局变量的全局访问性，我们可能要追踪整个代码库才能找到某个静态变量在什么地方被赋予了错误的值。\n  - 促进了耦合的发生：全局变量具有全局可见性，新手程序员可以会在单例中#include 包含了其他模块的头文件。新手程序员用这种方法顺利地完成了任务，却破坏了框架留下了耦合。如果不用全局实例，那他这样做的时候将会遇到阻碍，这种阻碍会提醒他不该这样做。 通过控制对实例的访问，你控制了耦合。\n  - 对并行不友好： 当我们将某些东西转为全局变量时，我们创建了一块每个线程都能看到并访问的内存， 却不知道其他线程是否正在使用那块内存。 这种方式带来了死锁，竞争状态，以及其他很难解决的线程同步问题。\n\n- **它能在你只有一个问题的时候解决两个**\n\n  正如之前的描述里写的，单例模式解决了两个问题。如果我们只有其中一个问题呢？ 保证实例是唯一存在的是很有用的，但是谁告诉我们要让每个人都能接触到它？ 同样，全局接触很方便，但是必须禁止存在多个实例吗？这是一个奇怪的约束，比如我们为了便利的访问把一个类改成了单例，却发现这个类无法创建不同的实例了。\n\n- **惰性初始化从你那里剥夺了控制权**\n\n  - 如果初始化很耗时，而初始化发生在游戏的高潮部分，会导致可见的掉帧和断续的游戏体验 。\n  -  游戏通常需要严格管理在堆上分配的内存来避免碎片。如果系统在初始化时分配到了堆上。我们需要知道初始化在何时发生， 这样我们才可以控制内存待在堆的哪里。  \n\n## 那该如何是好\n\n- **看看你是不是真正地需要类**\n\n  有些时候我们并不需要管理器来管理某些对象，而是让这些对象管理自己。\n\n- **将类限制为单一的实例**\n\n  我们可以通过别的方法保证一个类只有单一实例，比如用一个bool值记录，而无需提供全局的接触点。\n\n- **为了给实例提供方便的访问方法**\n\n  - 传进来：在用其他更加繁杂的方法前，考虑一下这个解决方案。 \n\n  - 从基类中获得：很多游戏架构有浅层但是宽泛的继承层次，通常只有一层深。举个例子，你也许有`GameObject`基类，每个游戏中的敌人或者对象都继承它。使用这样的架构，很大一部分游戏代码会存在于这些“子”推导类中。这就意味着这些类已经有了对同样事物的相同获取方法：它们的`GameObject`基类。我们可以利用这点： \n\n    ```c++\n    class GameObject\n    {\n    protected:\n    \tLog& getLog() { return log_; }\n    \n    private:\n    \tstatic Log& log_;\n    };\n    \n    class Enemy : public GameObject\n    {\n    \tvoid doSomething()\n    \t{\n    \t\tgetLog().write(\"I can log!\");\n    \t}\n    };\n    ```\n\n  - 从已经是全局的东西中获取： 大多数代码库仍有一些全局可用对象，比如一个代表了整个游戏状态的`Game`或`World`对象。我们可以让现有的全局对象捎带需要的东西，来减少全局变量类的数目。不让`Log`，`FileSystem`和`AudioPlayer`都变成单例，而是这样做：\n\n    ```c++\n    class Game\n    {\n    public:\n    \tstatic Game& instance() { return instance_; }\n    \n    \t// 设置log_, et. al. ……\n    \n    \tLog& getLog() { return *log_; }\n    \tFileSystem& getFileSystem() { return *fileSystem_; }\n    \tAudioPlayer& getAudioPlayer() { return *audioPlayer_; }\n    \n    private:\n    \tstatic Game instance_;\n    \n    \tLog* log_;\n    \tFileSystem* fileSystem_;\n    \tAudioPlayer* audioPlayer_;\n    };\n    ```\n\n  - 从服务定位器中获得： 定义一个类，存在的唯一目标就是为对象提供全局访问。 这种常见的模式被称为服务器定位模式，[有单独讲它的章节]( https://gpp.tkchu.me/service-locator.html )。\n\n## Lua中的实现\n\n```lua\nSingleton = {}\nfunction Singleton:new(o)\n    o = o or {}\n    setmetatable(o,self)\n    self.__index = self\n    return o\nend\n\nfunction Singleton:Instance()\n    if not self.instance then\n        self.instance = self:new()\n    end\n    return self.instance\nend\n\ns1 = Singleton:Instance()\ns2 = Singleton:Instance()\nif s1 == s2 then\n    print(\"两个对象是相同的实例\")\nend\n```\n","slug":"Singleton","published":1,"date":"2019-10-18T15:23:28.576Z","updated":"2019-10-18T15:23:28.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjgofpf4000ccgu8d5c4e1q5","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><blockquote>\n<p> 保证一个类只有一个实例，并且提供了访问该实例的全局访问点。</p>\n</blockquote>\n<p>单例模式或许是游戏开发中最常用的设计模式了。<br>在开发游戏时，开发者通常会为每个子系统定义单例类。<br>这些单例类负责统一管理某个系统，通常被称为管理器（manager）。<br>例如常见的UI管理器（UIManager）、场景管理器（SceneManager）等。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li><strong>保证一个类只有一个实例。</strong>有时候，如果类存在多个实例就不能正确的运行。这种类的特点是，对这些类进行调用的时候必须接触之前所有的操作。如果这些操作的发生在不同的实例，一个实例就无法知道另一个实例的操作，也就无法正常地运行了。</li>\n<li><strong>提供了访问该实例的全局访问点。</strong>有时候，游戏中的不同系统都会使用同一个类。 如果这些系统不能创建这个类的实例，那这个类就需要提供获取它实例的全局方法。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><a href=\"https://gpp.tkchu.me/singleton.html\">GPP（Game Programming Patterns）</a>中以一个文件系统封装类作为例子。</p>\n<p>经典的C++实现方案:</p>\n<pre><code class=\"C++\">class FileSystem\n&#123;\npublic:\n    static FileSystem&amp; instance()\n    &#123;\n        // 惰性初始化\n        if (instance_ == NULL) instance_ = new FileSystem();\n        return *instance_;\n    &#125;\n\nprivate:\n    FileSystem() &#123;&#125;\n\n    static FileSystem* instance_;\n&#125;;</code></pre>\n<p>静态的<code>instance_</code>成员保存了一个类的实例， 私有的构造器保证了它是<strong>唯一</strong>的。 公开的静态方法<code>instance()</code>让任何地方的代码都能访问实例。 在首次被请求时，它同样负责惰性实例化该单例。 </p>\n<p>线程安全的现代C++实现方案：</p>\n<pre><code class=\"C++\">class FileSystem\n&#123;\npublic:\n    static FileSystem&amp; instance()\n    &#123;\n        static FileSystem* instance = new FileSystem();\n        return *instance;\n    &#125;\n\nprivate:\n    FileSystem() &#123;&#125;\n&#125;;</code></pre>\n<h2 id=\"为什么我们使用它\"><a href=\"#为什么我们使用它\" class=\"headerlink\" title=\"为什么我们使用它\"></a>为什么我们使用它</h2><ul>\n<li><p><strong>如果没人用，就不必创建实例。</strong> 这种惰性初始化为节约内存和CPU资源带来了好处。</p>\n</li>\n<li><p><strong>它在运行时实例化。</strong> 单例通常的替代方案是使用含有静态成员变量的类，但是静态成员是自动初始化的。编译器在main()运行前初始化静态变量，而且初始化的顺序不可控，这意味着它们的相互依赖不可靠。而单例模式的惰性初始化没有这个问题。</p>\n</li>\n<li><p><strong>可继承单例。</strong>  单例可继承。这意味着单例模式可以配合多态性写出优美的代码。核心代码如下：</p>\n<pre><code class=\"lua\">class FileSystem\n&#123;\npublic:\n   static FileSystem&amp; instance();\n\n   virtual ~FileSystem() &#123;&#125;\n   virtual char* readFile(char* path) = 0;\n   virtual void  writeFile(char* path, char* contents) = 0;\n\nprotected:\n   FileSystem() &#123;&#125;\n&#125;;\n\nFileSystem&amp; FileSystem::instance()\n&#123;\n#if PLATFORM == PLAYSTATION3\n   static FileSystem * instance = new PS3FileSystem();\n#elif PLATFORM == WII\n   static FileSystem * instance = new WiiFileSystem();\n#endif\n   return *instance;\n&#125;</code></pre>\n<p>通过一个简单的编译器转换，我们把文件系统包装类绑定到合适的具体类型上。 整个代码库都可以使用<code>FileSystem::instance()</code>接触到文件系统，而无需和任何平台相关的代码耦合。耦合发生在为特定平台写的<code>FileSystem</code>类实现文件中。 </p>\n</li>\n</ul>\n<h2 id=\"为什么我们后悔使用它\"><a href=\"#为什么我们后悔使用它\" class=\"headerlink\" title=\"为什么我们后悔使用它\"></a>为什么我们后悔使用它</h2><ul>\n<li><p><strong>它是一个全局变量</strong></p>\n<ul>\n<li>让理解更加困难：全局变量的使用让我们除了关心当前函数之外，还需要关心全局变量的状态。而由于全局变量的全局访问性，我们可能要追踪整个代码库才能找到某个静态变量在什么地方被赋予了错误的值。</li>\n<li>促进了耦合的发生：全局变量具有全局可见性，新手程序员可以会在单例中#include 包含了其他模块的头文件。新手程序员用这种方法顺利地完成了任务，却破坏了框架留下了耦合。如果不用全局实例，那他这样做的时候将会遇到阻碍，这种阻碍会提醒他不该这样做。 通过控制对实例的访问，你控制了耦合。</li>\n<li>对并行不友好： 当我们将某些东西转为全局变量时，我们创建了一块每个线程都能看到并访问的内存， 却不知道其他线程是否正在使用那块内存。 这种方式带来了死锁，竞争状态，以及其他很难解决的线程同步问题。</li>\n</ul>\n</li>\n<li><p><strong>它能在你只有一个问题的时候解决两个</strong></p>\n<p>正如之前的描述里写的，单例模式解决了两个问题。如果我们只有其中一个问题呢？ 保证实例是唯一存在的是很有用的，但是谁告诉我们要让每个人都能接触到它？ 同样，全局接触很方便，但是必须禁止存在多个实例吗？这是一个奇怪的约束，比如我们为了便利的访问把一个类改成了单例，却发现这个类无法创建不同的实例了。</p>\n</li>\n<li><p><strong>惰性初始化从你那里剥夺了控制权</strong></p>\n<ul>\n<li>如果初始化很耗时，而初始化发生在游戏的高潮部分，会导致可见的掉帧和断续的游戏体验 。</li>\n<li>游戏通常需要严格管理在堆上分配的内存来避免碎片。如果系统在初始化时分配到了堆上。我们需要知道初始化在何时发生， 这样我们才可以控制内存待在堆的哪里。  </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"那该如何是好\"><a href=\"#那该如何是好\" class=\"headerlink\" title=\"那该如何是好\"></a>那该如何是好</h2><ul>\n<li><p><strong>看看你是不是真正地需要类</strong></p>\n<p>有些时候我们并不需要管理器来管理某些对象，而是让这些对象管理自己。</p>\n</li>\n<li><p><strong>将类限制为单一的实例</strong></p>\n<p>我们可以通过别的方法保证一个类只有单一实例，比如用一个bool值记录，而无需提供全局的接触点。</p>\n</li>\n<li><p><strong>为了给实例提供方便的访问方法</strong></p>\n<ul>\n<li><p>传进来：在用其他更加繁杂的方法前，考虑一下这个解决方案。 </p>\n</li>\n<li><p>从基类中获得：很多游戏架构有浅层但是宽泛的继承层次，通常只有一层深。举个例子，你也许有<code>GameObject</code>基类，每个游戏中的敌人或者对象都继承它。使用这样的架构，很大一部分游戏代码会存在于这些“子”推导类中。这就意味着这些类已经有了对同样事物的相同获取方法：它们的<code>GameObject</code>基类。我们可以利用这点： </p>\n<pre><code class=\"c++\">class GameObject\n&#123;\nprotected:\n    Log&amp; getLog() &#123; return log_; &#125;\n\nprivate:\n    static Log&amp; log_;\n&#125;;\n\nclass Enemy : public GameObject\n&#123;\n    void doSomething()\n    &#123;\n        getLog().write(&quot;I can log!&quot;);\n    &#125;\n&#125;;</code></pre>\n</li>\n<li><p>从已经是全局的东西中获取： 大多数代码库仍有一些全局可用对象，比如一个代表了整个游戏状态的<code>Game</code>或<code>World</code>对象。我们可以让现有的全局对象捎带需要的东西，来减少全局变量类的数目。不让<code>Log</code>，<code>FileSystem</code>和<code>AudioPlayer</code>都变成单例，而是这样做：</p>\n<pre><code class=\"c++\">class Game\n&#123;\npublic:\n    static Game&amp; instance() &#123; return instance_; &#125;\n\n    // 设置log_, et. al. ……\n\n    Log&amp; getLog() &#123; return *log_; &#125;\n    FileSystem&amp; getFileSystem() &#123; return *fileSystem_; &#125;\n    AudioPlayer&amp; getAudioPlayer() &#123; return *audioPlayer_; &#125;\n\nprivate:\n    static Game instance_;\n\n    Log* log_;\n    FileSystem* fileSystem_;\n    AudioPlayer* audioPlayer_;\n&#125;;</code></pre>\n</li>\n<li><p>从服务定位器中获得： 定义一个类，存在的唯一目标就是为对象提供全局访问。 这种常见的模式被称为服务器定位模式，<a href=\"https://gpp.tkchu.me/service-locator.html\">有单独讲它的章节</a>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Lua中的实现\"><a href=\"#Lua中的实现\" class=\"headerlink\" title=\"Lua中的实现\"></a>Lua中的实现</h2><pre><code class=\"lua\">Singleton = &#123;&#125;\nfunction Singleton:new(o)\n    o = o or &#123;&#125;\n    setmetatable(o,self)\n    self.__index = self\n    return o\nend\n\nfunction Singleton:Instance()\n    if not self.instance then\n        self.instance = self:new()\n    end\n    return self.instance\nend\n\ns1 = Singleton:Instance()\ns2 = Singleton:Instance()\nif s1 == s2 then\n    print(&quot;两个对象是相同的实例&quot;)\nend</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><blockquote>\n<p> 保证一个类只有一个实例，并且提供了访问该实例的全局访问点。</p>\n</blockquote>\n<p>单例模式或许是游戏开发中最常用的设计模式了。<br>在开发游戏时，开发者通常会为每个子系统定义单例类。<br>这些单例类负责统一管理某个系统，通常被称为管理器（manager）。<br>例如常见的UI管理器（UIManager）、场景管理器（SceneManager）等。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><ul>\n<li><strong>保证一个类只有一个实例。</strong>有时候，如果类存在多个实例就不能正确的运行。这种类的特点是，对这些类进行调用的时候必须接触之前所有的操作。如果这些操作的发生在不同的实例，一个实例就无法知道另一个实例的操作，也就无法正常地运行了。</li>\n<li><strong>提供了访问该实例的全局访问点。</strong>有时候，游戏中的不同系统都会使用同一个类。 如果这些系统不能创建这个类的实例，那这个类就需要提供获取它实例的全局方法。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><a href=\"https://gpp.tkchu.me/singleton.html\">GPP（Game Programming Patterns）</a>中以一个文件系统封装类作为例子。</p>\n<p>经典的C++实现方案:</p>\n<pre><code class=\"C++\">class FileSystem\n&#123;\npublic:\n    static FileSystem&amp; instance()\n    &#123;\n        // 惰性初始化\n        if (instance_ == NULL) instance_ = new FileSystem();\n        return *instance_;\n    &#125;\n\nprivate:\n    FileSystem() &#123;&#125;\n\n    static FileSystem* instance_;\n&#125;;</code></pre>\n<p>静态的<code>instance_</code>成员保存了一个类的实例， 私有的构造器保证了它是<strong>唯一</strong>的。 公开的静态方法<code>instance()</code>让任何地方的代码都能访问实例。 在首次被请求时，它同样负责惰性实例化该单例。 </p>\n<p>线程安全的现代C++实现方案：</p>\n<pre><code class=\"C++\">class FileSystem\n&#123;\npublic:\n    static FileSystem&amp; instance()\n    &#123;\n        static FileSystem* instance = new FileSystem();\n        return *instance;\n    &#125;\n\nprivate:\n    FileSystem() &#123;&#125;\n&#125;;</code></pre>\n<h2 id=\"为什么我们使用它\"><a href=\"#为什么我们使用它\" class=\"headerlink\" title=\"为什么我们使用它\"></a>为什么我们使用它</h2><ul>\n<li><p><strong>如果没人用，就不必创建实例。</strong> 这种惰性初始化为节约内存和CPU资源带来了好处。</p>\n</li>\n<li><p><strong>它在运行时实例化。</strong> 单例通常的替代方案是使用含有静态成员变量的类，但是静态成员是自动初始化的。编译器在main()运行前初始化静态变量，而且初始化的顺序不可控，这意味着它们的相互依赖不可靠。而单例模式的惰性初始化没有这个问题。</p>\n</li>\n<li><p><strong>可继承单例。</strong>  单例可继承。这意味着单例模式可以配合多态性写出优美的代码。核心代码如下：</p>\n<pre><code class=\"lua\">class FileSystem\n&#123;\npublic:\n   static FileSystem&amp; instance();\n\n   virtual ~FileSystem() &#123;&#125;\n   virtual char* readFile(char* path) = 0;\n   virtual void  writeFile(char* path, char* contents) = 0;\n\nprotected:\n   FileSystem() &#123;&#125;\n&#125;;\n\nFileSystem&amp; FileSystem::instance()\n&#123;\n#if PLATFORM == PLAYSTATION3\n   static FileSystem * instance = new PS3FileSystem();\n#elif PLATFORM == WII\n   static FileSystem * instance = new WiiFileSystem();\n#endif\n   return *instance;\n&#125;</code></pre>\n<p>通过一个简单的编译器转换，我们把文件系统包装类绑定到合适的具体类型上。 整个代码库都可以使用<code>FileSystem::instance()</code>接触到文件系统，而无需和任何平台相关的代码耦合。耦合发生在为特定平台写的<code>FileSystem</code>类实现文件中。 </p>\n</li>\n</ul>\n<h2 id=\"为什么我们后悔使用它\"><a href=\"#为什么我们后悔使用它\" class=\"headerlink\" title=\"为什么我们后悔使用它\"></a>为什么我们后悔使用它</h2><ul>\n<li><p><strong>它是一个全局变量</strong></p>\n<ul>\n<li>让理解更加困难：全局变量的使用让我们除了关心当前函数之外，还需要关心全局变量的状态。而由于全局变量的全局访问性，我们可能要追踪整个代码库才能找到某个静态变量在什么地方被赋予了错误的值。</li>\n<li>促进了耦合的发生：全局变量具有全局可见性，新手程序员可以会在单例中#include 包含了其他模块的头文件。新手程序员用这种方法顺利地完成了任务，却破坏了框架留下了耦合。如果不用全局实例，那他这样做的时候将会遇到阻碍，这种阻碍会提醒他不该这样做。 通过控制对实例的访问，你控制了耦合。</li>\n<li>对并行不友好： 当我们将某些东西转为全局变量时，我们创建了一块每个线程都能看到并访问的内存， 却不知道其他线程是否正在使用那块内存。 这种方式带来了死锁，竞争状态，以及其他很难解决的线程同步问题。</li>\n</ul>\n</li>\n<li><p><strong>它能在你只有一个问题的时候解决两个</strong></p>\n<p>正如之前的描述里写的，单例模式解决了两个问题。如果我们只有其中一个问题呢？ 保证实例是唯一存在的是很有用的，但是谁告诉我们要让每个人都能接触到它？ 同样，全局接触很方便，但是必须禁止存在多个实例吗？这是一个奇怪的约束，比如我们为了便利的访问把一个类改成了单例，却发现这个类无法创建不同的实例了。</p>\n</li>\n<li><p><strong>惰性初始化从你那里剥夺了控制权</strong></p>\n<ul>\n<li>如果初始化很耗时，而初始化发生在游戏的高潮部分，会导致可见的掉帧和断续的游戏体验 。</li>\n<li>游戏通常需要严格管理在堆上分配的内存来避免碎片。如果系统在初始化时分配到了堆上。我们需要知道初始化在何时发生， 这样我们才可以控制内存待在堆的哪里。  </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"那该如何是好\"><a href=\"#那该如何是好\" class=\"headerlink\" title=\"那该如何是好\"></a>那该如何是好</h2><ul>\n<li><p><strong>看看你是不是真正地需要类</strong></p>\n<p>有些时候我们并不需要管理器来管理某些对象，而是让这些对象管理自己。</p>\n</li>\n<li><p><strong>将类限制为单一的实例</strong></p>\n<p>我们可以通过别的方法保证一个类只有单一实例，比如用一个bool值记录，而无需提供全局的接触点。</p>\n</li>\n<li><p><strong>为了给实例提供方便的访问方法</strong></p>\n<ul>\n<li><p>传进来：在用其他更加繁杂的方法前，考虑一下这个解决方案。 </p>\n</li>\n<li><p>从基类中获得：很多游戏架构有浅层但是宽泛的继承层次，通常只有一层深。举个例子，你也许有<code>GameObject</code>基类，每个游戏中的敌人或者对象都继承它。使用这样的架构，很大一部分游戏代码会存在于这些“子”推导类中。这就意味着这些类已经有了对同样事物的相同获取方法：它们的<code>GameObject</code>基类。我们可以利用这点： </p>\n<pre><code class=\"c++\">class GameObject\n&#123;\nprotected:\n    Log&amp; getLog() &#123; return log_; &#125;\n\nprivate:\n    static Log&amp; log_;\n&#125;;\n\nclass Enemy : public GameObject\n&#123;\n    void doSomething()\n    &#123;\n        getLog().write(&quot;I can log!&quot;);\n    &#125;\n&#125;;</code></pre>\n</li>\n<li><p>从已经是全局的东西中获取： 大多数代码库仍有一些全局可用对象，比如一个代表了整个游戏状态的<code>Game</code>或<code>World</code>对象。我们可以让现有的全局对象捎带需要的东西，来减少全局变量类的数目。不让<code>Log</code>，<code>FileSystem</code>和<code>AudioPlayer</code>都变成单例，而是这样做：</p>\n<pre><code class=\"c++\">class Game\n&#123;\npublic:\n    static Game&amp; instance() &#123; return instance_; &#125;\n\n    // 设置log_, et. al. ……\n\n    Log&amp; getLog() &#123; return *log_; &#125;\n    FileSystem&amp; getFileSystem() &#123; return *fileSystem_; &#125;\n    AudioPlayer&amp; getAudioPlayer() &#123; return *audioPlayer_; &#125;\n\nprivate:\n    static Game instance_;\n\n    Log* log_;\n    FileSystem* fileSystem_;\n    AudioPlayer* audioPlayer_;\n&#125;;</code></pre>\n</li>\n<li><p>从服务定位器中获得： 定义一个类，存在的唯一目标就是为对象提供全局访问。 这种常见的模式被称为服务器定位模式，<a href=\"https://gpp.tkchu.me/service-locator.html\">有单独讲它的章节</a>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Lua中的实现\"><a href=\"#Lua中的实现\" class=\"headerlink\" title=\"Lua中的实现\"></a>Lua中的实现</h2><pre><code class=\"lua\">Singleton = &#123;&#125;\nfunction Singleton:new(o)\n    o = o or &#123;&#125;\n    setmetatable(o,self)\n    self.__index = self\n    return o\nend\n\nfunction Singleton:Instance()\n    if not self.instance then\n        self.instance = self:new()\n    end\n    return self.instance\nend\n\ns1 = Singleton:Instance()\ns2 = Singleton:Instance()\nif s1 == s2 then\n    print(&quot;两个对象是相同的实例&quot;)\nend</code></pre>\n"},{"title":"UnityShader笔记【一】","_content":"\n# 应用阶段\n\n## 把数据加载到显存中\n\n- 所有渲染所需的数据都需要从硬盘（Hard Disk Drive，HDD）中加载到系统内存（Random Access Memory，RAM）中。然后，网格和纹理等数据又被加载到显卡上的存储空间——显存（Video Random Access Memory， VRAM）中。这是因为，显卡对于显存的访问更快，而且大多数显卡对于RAM没有直接的访问权利。\n\n- 渲染所需的数据除了纹理和网格之外，还包括顶点的位置信息、法线方向、顶点颜色、纹理坐标等。\n\n- 当把数据加载到显存中后，RAM中的数据就可以移除了。但对于一些数据来说，CPU仍然需要访问它们（例如，我们希望CPU可以访问网格数据来进行碰撞检测），那么我们可能就不希望这些数据被移除，因为从硬盘加载到RAM的过程是十分耗时的。\n\n## 设置渲染状态\n\n- 什么是渲染状态呢？一个通俗的解释就是，这些状态定义了场景中的网格是怎样被渲染的。例如，使用哪个顶点着色器（Vertex Shader）/片元着色器（Fragment Shader）、光源属性、材质等。如果我们没有更改渲染状态，那么所有的网格都将使用同一种渲染状态。\n\n## 调用DrawCall\n\n- DrawCall就是一个命令，它的发起方是CPU，接收方是GPU。这个命令仅仅会指向一个需要被渲染的图元（premitives）列表，而不会再包含任何材质信息。\n\n- 当给定了一个DrawCall时，GPU就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的那些漂亮的像素。\n\n- DrawCall的调用次数会直接影响性能，应该尽量减少DrawCall调用次数。\n\n- 另外，CPU和GPU是并行工作的，通过一个命令缓冲区（可以理解为队列）来实现，CPU向命令缓冲区中添加命令，GPU向命令缓冲区读取命令。\n\n# 几何阶段\n\n> 在这个阶段，顶点将经历以下几个阶段：\n>\n> **模型坐标系** -> 模型变换 -> **世界坐标系**  -> 视图变换 -> **观察坐标系** -> 投影变换 -> **规范化的观察空间** -> 屏幕映射 -> **屏幕坐标系**\n\n## 顶点着色器（Vertex Shader）\n\n- 顶点着色器是完全可编程的，它通常用于实现顶点的空间变换、顶点着色等功能。\n- 顶点着色器是流水线的第一个阶段，它的输入来自于CPU。顶点着色器的处理单位是顶点，也就是说，输入进来的每个顶点都会调用一次顶点着色器。顶点着色器本身不可以创建或者销毁任何顶点，而且无法得到顶点与顶点之间的关系。例如，我们无法得知两个顶点是否属于同一个三角网格。但正是因为这样的相互独立性，GPU可以利用本身的特征并行化处理每一个顶点，这意味着这一阶段的处理速度会很快。\n- 顶点着色器需要完成的工作主要有：坐标变换和逐顶点光照。\n- 坐标变换，顾名思义，就是对顶点的坐标（即位置）进行某种变换。顶点着色器可以在这一步中改变顶点的位置，这在顶点动画中是非常有用的。例如，我们可以通过改变顶点位置来模拟水面、布料等。但需要注意的是，无论我们在顶点着色器中怎样改变顶点的位置，一个最基本的顶点着色器必须完成的一个工作是，把顶点坐标从模型空间转换到齐次裁剪空间。\n- ``旧版Unity``使用```o.vertex = mul(UNITY_MVP, v.vertex);```来完成顶点变换，而``新版Unity``使用```o.vertex = UnityObjectToClipPos(v.vertex);```来实现顶点变换。其功能就是把顶点坐标转换到齐次裁剪坐标系下，接着通常再由硬件做透视除法后，最终得到归一化的设备坐标（Nomalized Device Coordinates, NDC)。\n- 顶点着色器可以有不同的输出方式。最常见的输出路径是经光栅化后交给片元着色器进行处理。而在现代的Shader Model中，它还可以把数据发送给曲面细分着色器或几何着色器。\n\n## 几何/曲面细分着色器\n\n- 几何着色器和曲面细分着色器通常被合在一起成为几何/曲面细分着色器。\n- 几何/曲面细分着色器是一个可选的操作。\n\n### 几何着色器（Geometry Shader）\n\n- 几何着色器的输入是顶点数据。它可以对图元的顶点进行操作，它可以高效地创建和删除几何图元。\n\n### 曲面细分着色器（Tessellation Shader）\n\n- 曲面细分着色器可以通过增加顶点，让现有的多边形网格更加逼近曲面。\n\n## 裁剪（Clipping）\n\n- 由于我们的场景可能会很大，而摄像机的视野范围很有可能不会覆盖所有的场景物体，一个很自然的想法就是，那些不在摄像机视野范围内的物体不需要被处理。而裁剪就是为了完成这个目的而被提出来。\n\n- 一个图元与摄像机视野的关系有3种：完全在视野内、部分在视野内、完全在视野外。完全在视野内的图元就继续传递给下一个流水线阶段，完全在视野外的图元不会继续向下传递，以为它们不需要被渲染。而那些部分在视野内的图元需要进行一个处理，这就是裁剪。例如，一条线段的一个顶点在视野内，而另一个顶点不在视野内，那么在视野外部的顶点应该使用一个新的顶点来代替，这个新的顶点位于这条线段和视野边界的交点处。\n\n- 和顶点着色器不同，这一步是不可编程的，即我们无法通过编程来控制裁剪的过程，而是硬件上的固定操作，但我们可以自定义一个裁剪操作来对这一步进行配置。\n\n## 屏幕映射（Screen Mapping）\n\n- 屏幕映射的任务是把每个图元的x和y坐标转换到屏幕坐标系（Screen Coordinates）下。屏幕坐标系是一个二维坐标系，它和我们用于显示画面的分辨率有很大关系。\n\n- 屏幕坐标系和z坐标一起构成了一个坐标系，叫做窗口坐标系（Window Coordinates）。这些值会一起被传递到光栅化阶段。\n\n# 光栅化阶段\n\n## 三角形设置（Triangle Setup）\n\n- 将几何阶段传过来的顶点数据进行处理，将顶点连成三角网格。\n\n## 三角形遍历（Triangle Traversal）\n\n- 三角形遍历的输入就是三角形设置的结果。\n- 根据顶点信息，计算得到覆盖三角网格的像素位置，对于的这些像素就生成一个片元（fragment）。\n- 而片元中每个像素的状态都是对三个顶点的信息进行插值得到的。\n\n## 片元着色器（Fragment Shader）\n\n- 这是一个可编程的阶段\n- 根据之前的片元信息，计算每个片元的颜色值。\n- 这个阶段可以完成很多重要的渲染技术，比如纹理贴图。\n\n## 逐片元操作（Per-Fragment Operations）\n\n- 在DirectX中又叫做输出合并阶段（Output-Merger）。\n- 这里将每个片元的深度和颜色与帧缓存结合在一起。每个像素的颜色都是混合的结果。\n\n## 生成屏幕图像\n\n- 显示图像！","source":"_posts/ShaderNote1.md","raw":"---\ntitle: UnityShader笔记【一】\ntags: [Unity, Shader]\ncategories: 学习笔记\n---\n\n# 应用阶段\n\n## 把数据加载到显存中\n\n- 所有渲染所需的数据都需要从硬盘（Hard Disk Drive，HDD）中加载到系统内存（Random Access Memory，RAM）中。然后，网格和纹理等数据又被加载到显卡上的存储空间——显存（Video Random Access Memory， VRAM）中。这是因为，显卡对于显存的访问更快，而且大多数显卡对于RAM没有直接的访问权利。\n\n- 渲染所需的数据除了纹理和网格之外，还包括顶点的位置信息、法线方向、顶点颜色、纹理坐标等。\n\n- 当把数据加载到显存中后，RAM中的数据就可以移除了。但对于一些数据来说，CPU仍然需要访问它们（例如，我们希望CPU可以访问网格数据来进行碰撞检测），那么我们可能就不希望这些数据被移除，因为从硬盘加载到RAM的过程是十分耗时的。\n\n## 设置渲染状态\n\n- 什么是渲染状态呢？一个通俗的解释就是，这些状态定义了场景中的网格是怎样被渲染的。例如，使用哪个顶点着色器（Vertex Shader）/片元着色器（Fragment Shader）、光源属性、材质等。如果我们没有更改渲染状态，那么所有的网格都将使用同一种渲染状态。\n\n## 调用DrawCall\n\n- DrawCall就是一个命令，它的发起方是CPU，接收方是GPU。这个命令仅仅会指向一个需要被渲染的图元（premitives）列表，而不会再包含任何材质信息。\n\n- 当给定了一个DrawCall时，GPU就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的那些漂亮的像素。\n\n- DrawCall的调用次数会直接影响性能，应该尽量减少DrawCall调用次数。\n\n- 另外，CPU和GPU是并行工作的，通过一个命令缓冲区（可以理解为队列）来实现，CPU向命令缓冲区中添加命令，GPU向命令缓冲区读取命令。\n\n# 几何阶段\n\n> 在这个阶段，顶点将经历以下几个阶段：\n>\n> **模型坐标系** -> 模型变换 -> **世界坐标系**  -> 视图变换 -> **观察坐标系** -> 投影变换 -> **规范化的观察空间** -> 屏幕映射 -> **屏幕坐标系**\n\n## 顶点着色器（Vertex Shader）\n\n- 顶点着色器是完全可编程的，它通常用于实现顶点的空间变换、顶点着色等功能。\n- 顶点着色器是流水线的第一个阶段，它的输入来自于CPU。顶点着色器的处理单位是顶点，也就是说，输入进来的每个顶点都会调用一次顶点着色器。顶点着色器本身不可以创建或者销毁任何顶点，而且无法得到顶点与顶点之间的关系。例如，我们无法得知两个顶点是否属于同一个三角网格。但正是因为这样的相互独立性，GPU可以利用本身的特征并行化处理每一个顶点，这意味着这一阶段的处理速度会很快。\n- 顶点着色器需要完成的工作主要有：坐标变换和逐顶点光照。\n- 坐标变换，顾名思义，就是对顶点的坐标（即位置）进行某种变换。顶点着色器可以在这一步中改变顶点的位置，这在顶点动画中是非常有用的。例如，我们可以通过改变顶点位置来模拟水面、布料等。但需要注意的是，无论我们在顶点着色器中怎样改变顶点的位置，一个最基本的顶点着色器必须完成的一个工作是，把顶点坐标从模型空间转换到齐次裁剪空间。\n- ``旧版Unity``使用```o.vertex = mul(UNITY_MVP, v.vertex);```来完成顶点变换，而``新版Unity``使用```o.vertex = UnityObjectToClipPos(v.vertex);```来实现顶点变换。其功能就是把顶点坐标转换到齐次裁剪坐标系下，接着通常再由硬件做透视除法后，最终得到归一化的设备坐标（Nomalized Device Coordinates, NDC)。\n- 顶点着色器可以有不同的输出方式。最常见的输出路径是经光栅化后交给片元着色器进行处理。而在现代的Shader Model中，它还可以把数据发送给曲面细分着色器或几何着色器。\n\n## 几何/曲面细分着色器\n\n- 几何着色器和曲面细分着色器通常被合在一起成为几何/曲面细分着色器。\n- 几何/曲面细分着色器是一个可选的操作。\n\n### 几何着色器（Geometry Shader）\n\n- 几何着色器的输入是顶点数据。它可以对图元的顶点进行操作，它可以高效地创建和删除几何图元。\n\n### 曲面细分着色器（Tessellation Shader）\n\n- 曲面细分着色器可以通过增加顶点，让现有的多边形网格更加逼近曲面。\n\n## 裁剪（Clipping）\n\n- 由于我们的场景可能会很大，而摄像机的视野范围很有可能不会覆盖所有的场景物体，一个很自然的想法就是，那些不在摄像机视野范围内的物体不需要被处理。而裁剪就是为了完成这个目的而被提出来。\n\n- 一个图元与摄像机视野的关系有3种：完全在视野内、部分在视野内、完全在视野外。完全在视野内的图元就继续传递给下一个流水线阶段，完全在视野外的图元不会继续向下传递，以为它们不需要被渲染。而那些部分在视野内的图元需要进行一个处理，这就是裁剪。例如，一条线段的一个顶点在视野内，而另一个顶点不在视野内，那么在视野外部的顶点应该使用一个新的顶点来代替，这个新的顶点位于这条线段和视野边界的交点处。\n\n- 和顶点着色器不同，这一步是不可编程的，即我们无法通过编程来控制裁剪的过程，而是硬件上的固定操作，但我们可以自定义一个裁剪操作来对这一步进行配置。\n\n## 屏幕映射（Screen Mapping）\n\n- 屏幕映射的任务是把每个图元的x和y坐标转换到屏幕坐标系（Screen Coordinates）下。屏幕坐标系是一个二维坐标系，它和我们用于显示画面的分辨率有很大关系。\n\n- 屏幕坐标系和z坐标一起构成了一个坐标系，叫做窗口坐标系（Window Coordinates）。这些值会一起被传递到光栅化阶段。\n\n# 光栅化阶段\n\n## 三角形设置（Triangle Setup）\n\n- 将几何阶段传过来的顶点数据进行处理，将顶点连成三角网格。\n\n## 三角形遍历（Triangle Traversal）\n\n- 三角形遍历的输入就是三角形设置的结果。\n- 根据顶点信息，计算得到覆盖三角网格的像素位置，对于的这些像素就生成一个片元（fragment）。\n- 而片元中每个像素的状态都是对三个顶点的信息进行插值得到的。\n\n## 片元着色器（Fragment Shader）\n\n- 这是一个可编程的阶段\n- 根据之前的片元信息，计算每个片元的颜色值。\n- 这个阶段可以完成很多重要的渲染技术，比如纹理贴图。\n\n## 逐片元操作（Per-Fragment Operations）\n\n- 在DirectX中又叫做输出合并阶段（Output-Merger）。\n- 这里将每个片元的深度和颜色与帧缓存结合在一起。每个像素的颜色都是混合的结果。\n\n## 生成屏幕图像\n\n- 显示图像！","slug":"ShaderNote1","published":1,"date":"2019-10-11T14:17:26.046Z","updated":"2019-10-12T15:56:35.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjgofpf5000ecgu8cgn0g5m2","content":"<h1 id=\"应用阶段\"><a href=\"#应用阶段\" class=\"headerlink\" title=\"应用阶段\"></a>应用阶段</h1><h2 id=\"把数据加载到显存中\"><a href=\"#把数据加载到显存中\" class=\"headerlink\" title=\"把数据加载到显存中\"></a>把数据加载到显存中</h2><ul>\n<li><p>所有渲染所需的数据都需要从硬盘（Hard Disk Drive，HDD）中加载到系统内存（Random Access Memory，RAM）中。然后，网格和纹理等数据又被加载到显卡上的存储空间——显存（Video Random Access Memory， VRAM）中。这是因为，显卡对于显存的访问更快，而且大多数显卡对于RAM没有直接的访问权利。</p>\n</li>\n<li><p>渲染所需的数据除了纹理和网格之外，还包括顶点的位置信息、法线方向、顶点颜色、纹理坐标等。</p>\n</li>\n<li><p>当把数据加载到显存中后，RAM中的数据就可以移除了。但对于一些数据来说，CPU仍然需要访问它们（例如，我们希望CPU可以访问网格数据来进行碰撞检测），那么我们可能就不希望这些数据被移除，因为从硬盘加载到RAM的过程是十分耗时的。</p>\n</li>\n</ul>\n<h2 id=\"设置渲染状态\"><a href=\"#设置渲染状态\" class=\"headerlink\" title=\"设置渲染状态\"></a>设置渲染状态</h2><ul>\n<li>什么是渲染状态呢？一个通俗的解释就是，这些状态定义了场景中的网格是怎样被渲染的。例如，使用哪个顶点着色器（Vertex Shader）/片元着色器（Fragment Shader）、光源属性、材质等。如果我们没有更改渲染状态，那么所有的网格都将使用同一种渲染状态。</li>\n</ul>\n<h2 id=\"调用DrawCall\"><a href=\"#调用DrawCall\" class=\"headerlink\" title=\"调用DrawCall\"></a>调用DrawCall</h2><ul>\n<li><p>DrawCall就是一个命令，它的发起方是CPU，接收方是GPU。这个命令仅仅会指向一个需要被渲染的图元（premitives）列表，而不会再包含任何材质信息。</p>\n</li>\n<li><p>当给定了一个DrawCall时，GPU就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的那些漂亮的像素。</p>\n</li>\n<li><p>DrawCall的调用次数会直接影响性能，应该尽量减少DrawCall调用次数。</p>\n</li>\n<li><p>另外，CPU和GPU是并行工作的，通过一个命令缓冲区（可以理解为队列）来实现，CPU向命令缓冲区中添加命令，GPU向命令缓冲区读取命令。</p>\n</li>\n</ul>\n<h1 id=\"几何阶段\"><a href=\"#几何阶段\" class=\"headerlink\" title=\"几何阶段\"></a>几何阶段</h1><blockquote>\n<p>在这个阶段，顶点将经历以下几个阶段：</p>\n<p><strong>模型坐标系</strong> -&gt; 模型变换 -&gt; <strong>世界坐标系</strong>  -&gt; 视图变换 -&gt; <strong>观察坐标系</strong> -&gt; 投影变换 -&gt; <strong>规范化的观察空间</strong> -&gt; 屏幕映射 -&gt; <strong>屏幕坐标系</strong></p>\n</blockquote>\n<h2 id=\"顶点着色器（Vertex-Shader）\"><a href=\"#顶点着色器（Vertex-Shader）\" class=\"headerlink\" title=\"顶点着色器（Vertex Shader）\"></a>顶点着色器（Vertex Shader）</h2><ul>\n<li>顶点着色器是完全可编程的，它通常用于实现顶点的空间变换、顶点着色等功能。</li>\n<li>顶点着色器是流水线的第一个阶段，它的输入来自于CPU。顶点着色器的处理单位是顶点，也就是说，输入进来的每个顶点都会调用一次顶点着色器。顶点着色器本身不可以创建或者销毁任何顶点，而且无法得到顶点与顶点之间的关系。例如，我们无法得知两个顶点是否属于同一个三角网格。但正是因为这样的相互独立性，GPU可以利用本身的特征并行化处理每一个顶点，这意味着这一阶段的处理速度会很快。</li>\n<li>顶点着色器需要完成的工作主要有：坐标变换和逐顶点光照。</li>\n<li>坐标变换，顾名思义，就是对顶点的坐标（即位置）进行某种变换。顶点着色器可以在这一步中改变顶点的位置，这在顶点动画中是非常有用的。例如，我们可以通过改变顶点位置来模拟水面、布料等。但需要注意的是，无论我们在顶点着色器中怎样改变顶点的位置，一个最基本的顶点着色器必须完成的一个工作是，把顶点坐标从模型空间转换到齐次裁剪空间。</li>\n<li><code>旧版Unity</code>使用<code>o.vertex = mul(UNITY_MVP, v.vertex);</code>来完成顶点变换，而<code>新版Unity</code>使用<code>o.vertex = UnityObjectToClipPos(v.vertex);</code>来实现顶点变换。其功能就是把顶点坐标转换到齐次裁剪坐标系下，接着通常再由硬件做透视除法后，最终得到归一化的设备坐标（Nomalized Device Coordinates, NDC)。</li>\n<li>顶点着色器可以有不同的输出方式。最常见的输出路径是经光栅化后交给片元着色器进行处理。而在现代的Shader Model中，它还可以把数据发送给曲面细分着色器或几何着色器。</li>\n</ul>\n<h2 id=\"几何-曲面细分着色器\"><a href=\"#几何-曲面细分着色器\" class=\"headerlink\" title=\"几何/曲面细分着色器\"></a>几何/曲面细分着色器</h2><ul>\n<li>几何着色器和曲面细分着色器通常被合在一起成为几何/曲面细分着色器。</li>\n<li>几何/曲面细分着色器是一个可选的操作。</li>\n</ul>\n<h3 id=\"几何着色器（Geometry-Shader）\"><a href=\"#几何着色器（Geometry-Shader）\" class=\"headerlink\" title=\"几何着色器（Geometry Shader）\"></a>几何着色器（Geometry Shader）</h3><ul>\n<li>几何着色器的输入是顶点数据。它可以对图元的顶点进行操作，它可以高效地创建和删除几何图元。</li>\n</ul>\n<h3 id=\"曲面细分着色器（Tessellation-Shader）\"><a href=\"#曲面细分着色器（Tessellation-Shader）\" class=\"headerlink\" title=\"曲面细分着色器（Tessellation Shader）\"></a>曲面细分着色器（Tessellation Shader）</h3><ul>\n<li>曲面细分着色器可以通过增加顶点，让现有的多边形网格更加逼近曲面。</li>\n</ul>\n<h2 id=\"裁剪（Clipping）\"><a href=\"#裁剪（Clipping）\" class=\"headerlink\" title=\"裁剪（Clipping）\"></a>裁剪（Clipping）</h2><ul>\n<li><p>由于我们的场景可能会很大，而摄像机的视野范围很有可能不会覆盖所有的场景物体，一个很自然的想法就是，那些不在摄像机视野范围内的物体不需要被处理。而裁剪就是为了完成这个目的而被提出来。</p>\n</li>\n<li><p>一个图元与摄像机视野的关系有3种：完全在视野内、部分在视野内、完全在视野外。完全在视野内的图元就继续传递给下一个流水线阶段，完全在视野外的图元不会继续向下传递，以为它们不需要被渲染。而那些部分在视野内的图元需要进行一个处理，这就是裁剪。例如，一条线段的一个顶点在视野内，而另一个顶点不在视野内，那么在视野外部的顶点应该使用一个新的顶点来代替，这个新的顶点位于这条线段和视野边界的交点处。</p>\n</li>\n<li><p>和顶点着色器不同，这一步是不可编程的，即我们无法通过编程来控制裁剪的过程，而是硬件上的固定操作，但我们可以自定义一个裁剪操作来对这一步进行配置。</p>\n</li>\n</ul>\n<h2 id=\"屏幕映射（Screen-Mapping）\"><a href=\"#屏幕映射（Screen-Mapping）\" class=\"headerlink\" title=\"屏幕映射（Screen Mapping）\"></a>屏幕映射（Screen Mapping）</h2><ul>\n<li><p>屏幕映射的任务是把每个图元的x和y坐标转换到屏幕坐标系（Screen Coordinates）下。屏幕坐标系是一个二维坐标系，它和我们用于显示画面的分辨率有很大关系。</p>\n</li>\n<li><p>屏幕坐标系和z坐标一起构成了一个坐标系，叫做窗口坐标系（Window Coordinates）。这些值会一起被传递到光栅化阶段。</p>\n</li>\n</ul>\n<h1 id=\"光栅化阶段\"><a href=\"#光栅化阶段\" class=\"headerlink\" title=\"光栅化阶段\"></a>光栅化阶段</h1><h2 id=\"三角形设置（Triangle-Setup）\"><a href=\"#三角形设置（Triangle-Setup）\" class=\"headerlink\" title=\"三角形设置（Triangle Setup）\"></a>三角形设置（Triangle Setup）</h2><ul>\n<li>将几何阶段传过来的顶点数据进行处理，将顶点连成三角网格。</li>\n</ul>\n<h2 id=\"三角形遍历（Triangle-Traversal）\"><a href=\"#三角形遍历（Triangle-Traversal）\" class=\"headerlink\" title=\"三角形遍历（Triangle Traversal）\"></a>三角形遍历（Triangle Traversal）</h2><ul>\n<li>三角形遍历的输入就是三角形设置的结果。</li>\n<li>根据顶点信息，计算得到覆盖三角网格的像素位置，对于的这些像素就生成一个片元（fragment）。</li>\n<li>而片元中每个像素的状态都是对三个顶点的信息进行插值得到的。</li>\n</ul>\n<h2 id=\"片元着色器（Fragment-Shader）\"><a href=\"#片元着色器（Fragment-Shader）\" class=\"headerlink\" title=\"片元着色器（Fragment Shader）\"></a>片元着色器（Fragment Shader）</h2><ul>\n<li>这是一个可编程的阶段</li>\n<li>根据之前的片元信息，计算每个片元的颜色值。</li>\n<li>这个阶段可以完成很多重要的渲染技术，比如纹理贴图。</li>\n</ul>\n<h2 id=\"逐片元操作（Per-Fragment-Operations）\"><a href=\"#逐片元操作（Per-Fragment-Operations）\" class=\"headerlink\" title=\"逐片元操作（Per-Fragment Operations）\"></a>逐片元操作（Per-Fragment Operations）</h2><ul>\n<li>在DirectX中又叫做输出合并阶段（Output-Merger）。</li>\n<li>这里将每个片元的深度和颜色与帧缓存结合在一起。每个像素的颜色都是混合的结果。</li>\n</ul>\n<h2 id=\"生成屏幕图像\"><a href=\"#生成屏幕图像\" class=\"headerlink\" title=\"生成屏幕图像\"></a>生成屏幕图像</h2><ul>\n<li>显示图像！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"应用阶段\"><a href=\"#应用阶段\" class=\"headerlink\" title=\"应用阶段\"></a>应用阶段</h1><h2 id=\"把数据加载到显存中\"><a href=\"#把数据加载到显存中\" class=\"headerlink\" title=\"把数据加载到显存中\"></a>把数据加载到显存中</h2><ul>\n<li><p>所有渲染所需的数据都需要从硬盘（Hard Disk Drive，HDD）中加载到系统内存（Random Access Memory，RAM）中。然后，网格和纹理等数据又被加载到显卡上的存储空间——显存（Video Random Access Memory， VRAM）中。这是因为，显卡对于显存的访问更快，而且大多数显卡对于RAM没有直接的访问权利。</p>\n</li>\n<li><p>渲染所需的数据除了纹理和网格之外，还包括顶点的位置信息、法线方向、顶点颜色、纹理坐标等。</p>\n</li>\n<li><p>当把数据加载到显存中后，RAM中的数据就可以移除了。但对于一些数据来说，CPU仍然需要访问它们（例如，我们希望CPU可以访问网格数据来进行碰撞检测），那么我们可能就不希望这些数据被移除，因为从硬盘加载到RAM的过程是十分耗时的。</p>\n</li>\n</ul>\n<h2 id=\"设置渲染状态\"><a href=\"#设置渲染状态\" class=\"headerlink\" title=\"设置渲染状态\"></a>设置渲染状态</h2><ul>\n<li>什么是渲染状态呢？一个通俗的解释就是，这些状态定义了场景中的网格是怎样被渲染的。例如，使用哪个顶点着色器（Vertex Shader）/片元着色器（Fragment Shader）、光源属性、材质等。如果我们没有更改渲染状态，那么所有的网格都将使用同一种渲染状态。</li>\n</ul>\n<h2 id=\"调用DrawCall\"><a href=\"#调用DrawCall\" class=\"headerlink\" title=\"调用DrawCall\"></a>调用DrawCall</h2><ul>\n<li><p>DrawCall就是一个命令，它的发起方是CPU，接收方是GPU。这个命令仅仅会指向一个需要被渲染的图元（premitives）列表，而不会再包含任何材质信息。</p>\n</li>\n<li><p>当给定了一个DrawCall时，GPU就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的那些漂亮的像素。</p>\n</li>\n<li><p>DrawCall的调用次数会直接影响性能，应该尽量减少DrawCall调用次数。</p>\n</li>\n<li><p>另外，CPU和GPU是并行工作的，通过一个命令缓冲区（可以理解为队列）来实现，CPU向命令缓冲区中添加命令，GPU向命令缓冲区读取命令。</p>\n</li>\n</ul>\n<h1 id=\"几何阶段\"><a href=\"#几何阶段\" class=\"headerlink\" title=\"几何阶段\"></a>几何阶段</h1><blockquote>\n<p>在这个阶段，顶点将经历以下几个阶段：</p>\n<p><strong>模型坐标系</strong> -&gt; 模型变换 -&gt; <strong>世界坐标系</strong>  -&gt; 视图变换 -&gt; <strong>观察坐标系</strong> -&gt; 投影变换 -&gt; <strong>规范化的观察空间</strong> -&gt; 屏幕映射 -&gt; <strong>屏幕坐标系</strong></p>\n</blockquote>\n<h2 id=\"顶点着色器（Vertex-Shader）\"><a href=\"#顶点着色器（Vertex-Shader）\" class=\"headerlink\" title=\"顶点着色器（Vertex Shader）\"></a>顶点着色器（Vertex Shader）</h2><ul>\n<li>顶点着色器是完全可编程的，它通常用于实现顶点的空间变换、顶点着色等功能。</li>\n<li>顶点着色器是流水线的第一个阶段，它的输入来自于CPU。顶点着色器的处理单位是顶点，也就是说，输入进来的每个顶点都会调用一次顶点着色器。顶点着色器本身不可以创建或者销毁任何顶点，而且无法得到顶点与顶点之间的关系。例如，我们无法得知两个顶点是否属于同一个三角网格。但正是因为这样的相互独立性，GPU可以利用本身的特征并行化处理每一个顶点，这意味着这一阶段的处理速度会很快。</li>\n<li>顶点着色器需要完成的工作主要有：坐标变换和逐顶点光照。</li>\n<li>坐标变换，顾名思义，就是对顶点的坐标（即位置）进行某种变换。顶点着色器可以在这一步中改变顶点的位置，这在顶点动画中是非常有用的。例如，我们可以通过改变顶点位置来模拟水面、布料等。但需要注意的是，无论我们在顶点着色器中怎样改变顶点的位置，一个最基本的顶点着色器必须完成的一个工作是，把顶点坐标从模型空间转换到齐次裁剪空间。</li>\n<li><code>旧版Unity</code>使用<code>o.vertex = mul(UNITY_MVP, v.vertex);</code>来完成顶点变换，而<code>新版Unity</code>使用<code>o.vertex = UnityObjectToClipPos(v.vertex);</code>来实现顶点变换。其功能就是把顶点坐标转换到齐次裁剪坐标系下，接着通常再由硬件做透视除法后，最终得到归一化的设备坐标（Nomalized Device Coordinates, NDC)。</li>\n<li>顶点着色器可以有不同的输出方式。最常见的输出路径是经光栅化后交给片元着色器进行处理。而在现代的Shader Model中，它还可以把数据发送给曲面细分着色器或几何着色器。</li>\n</ul>\n<h2 id=\"几何-曲面细分着色器\"><a href=\"#几何-曲面细分着色器\" class=\"headerlink\" title=\"几何/曲面细分着色器\"></a>几何/曲面细分着色器</h2><ul>\n<li>几何着色器和曲面细分着色器通常被合在一起成为几何/曲面细分着色器。</li>\n<li>几何/曲面细分着色器是一个可选的操作。</li>\n</ul>\n<h3 id=\"几何着色器（Geometry-Shader）\"><a href=\"#几何着色器（Geometry-Shader）\" class=\"headerlink\" title=\"几何着色器（Geometry Shader）\"></a>几何着色器（Geometry Shader）</h3><ul>\n<li>几何着色器的输入是顶点数据。它可以对图元的顶点进行操作，它可以高效地创建和删除几何图元。</li>\n</ul>\n<h3 id=\"曲面细分着色器（Tessellation-Shader）\"><a href=\"#曲面细分着色器（Tessellation-Shader）\" class=\"headerlink\" title=\"曲面细分着色器（Tessellation Shader）\"></a>曲面细分着色器（Tessellation Shader）</h3><ul>\n<li>曲面细分着色器可以通过增加顶点，让现有的多边形网格更加逼近曲面。</li>\n</ul>\n<h2 id=\"裁剪（Clipping）\"><a href=\"#裁剪（Clipping）\" class=\"headerlink\" title=\"裁剪（Clipping）\"></a>裁剪（Clipping）</h2><ul>\n<li><p>由于我们的场景可能会很大，而摄像机的视野范围很有可能不会覆盖所有的场景物体，一个很自然的想法就是，那些不在摄像机视野范围内的物体不需要被处理。而裁剪就是为了完成这个目的而被提出来。</p>\n</li>\n<li><p>一个图元与摄像机视野的关系有3种：完全在视野内、部分在视野内、完全在视野外。完全在视野内的图元就继续传递给下一个流水线阶段，完全在视野外的图元不会继续向下传递，以为它们不需要被渲染。而那些部分在视野内的图元需要进行一个处理，这就是裁剪。例如，一条线段的一个顶点在视野内，而另一个顶点不在视野内，那么在视野外部的顶点应该使用一个新的顶点来代替，这个新的顶点位于这条线段和视野边界的交点处。</p>\n</li>\n<li><p>和顶点着色器不同，这一步是不可编程的，即我们无法通过编程来控制裁剪的过程，而是硬件上的固定操作，但我们可以自定义一个裁剪操作来对这一步进行配置。</p>\n</li>\n</ul>\n<h2 id=\"屏幕映射（Screen-Mapping）\"><a href=\"#屏幕映射（Screen-Mapping）\" class=\"headerlink\" title=\"屏幕映射（Screen Mapping）\"></a>屏幕映射（Screen Mapping）</h2><ul>\n<li><p>屏幕映射的任务是把每个图元的x和y坐标转换到屏幕坐标系（Screen Coordinates）下。屏幕坐标系是一个二维坐标系，它和我们用于显示画面的分辨率有很大关系。</p>\n</li>\n<li><p>屏幕坐标系和z坐标一起构成了一个坐标系，叫做窗口坐标系（Window Coordinates）。这些值会一起被传递到光栅化阶段。</p>\n</li>\n</ul>\n<h1 id=\"光栅化阶段\"><a href=\"#光栅化阶段\" class=\"headerlink\" title=\"光栅化阶段\"></a>光栅化阶段</h1><h2 id=\"三角形设置（Triangle-Setup）\"><a href=\"#三角形设置（Triangle-Setup）\" class=\"headerlink\" title=\"三角形设置（Triangle Setup）\"></a>三角形设置（Triangle Setup）</h2><ul>\n<li>将几何阶段传过来的顶点数据进行处理，将顶点连成三角网格。</li>\n</ul>\n<h2 id=\"三角形遍历（Triangle-Traversal）\"><a href=\"#三角形遍历（Triangle-Traversal）\" class=\"headerlink\" title=\"三角形遍历（Triangle Traversal）\"></a>三角形遍历（Triangle Traversal）</h2><ul>\n<li>三角形遍历的输入就是三角形设置的结果。</li>\n<li>根据顶点信息，计算得到覆盖三角网格的像素位置，对于的这些像素就生成一个片元（fragment）。</li>\n<li>而片元中每个像素的状态都是对三个顶点的信息进行插值得到的。</li>\n</ul>\n<h2 id=\"片元着色器（Fragment-Shader）\"><a href=\"#片元着色器（Fragment-Shader）\" class=\"headerlink\" title=\"片元着色器（Fragment Shader）\"></a>片元着色器（Fragment Shader）</h2><ul>\n<li>这是一个可编程的阶段</li>\n<li>根据之前的片元信息，计算每个片元的颜色值。</li>\n<li>这个阶段可以完成很多重要的渲染技术，比如纹理贴图。</li>\n</ul>\n<h2 id=\"逐片元操作（Per-Fragment-Operations）\"><a href=\"#逐片元操作（Per-Fragment-Operations）\" class=\"headerlink\" title=\"逐片元操作（Per-Fragment Operations）\"></a>逐片元操作（Per-Fragment Operations）</h2><ul>\n<li>在DirectX中又叫做输出合并阶段（Output-Merger）。</li>\n<li>这里将每个片元的深度和颜色与帧缓存结合在一起。每个像素的颜色都是混合的结果。</li>\n</ul>\n<h2 id=\"生成屏幕图像\"><a href=\"#生成屏幕图像\" class=\"headerlink\" title=\"生成屏幕图像\"></a>生成屏幕图像</h2><ul>\n<li>显示图像！</li>\n</ul>\n"},{"title":"知识点记录","_content":"\n# 知识点记录\n\n平时总是能遇到各种各样零碎的知识点，有的太小了没有写下来，有的则是太零碎了不知道怎么写下来，久而久之很多以前知道的也忘了，以前遇到过的问题又再次成为阻碍，那感觉实在难受。所以开一个笔记专门记录一些小的知识点，等有空再把知识点细化单独整理成博客。相当于作为博客的题材库。\n\n## C/C++\n\n### 1.typedef与函数指针\n\n#### typedef常见的用法\n\n相当于是给类型起一个别名\n\n~~~c++\ntypedef int myInt;\n~~~\n\n#### 函数指针\n\n- 返回类型(\\*函数名)(参数表)\n\n  ~~~\n  #include <iostream>\n  using namespace std;\n  \n  //定义一个函数指针pFUN，它指向一个返回类型为char，有一个整型的参数的函数\n  char (*pFun)(int);\n  \n  //定义一个返回类型为char，参数为int的函数\n  //从指针层面上理解该函数，即函数的函数名实际上是一个指针，\n  //该指针指向函数在内存中的首地址\n  char glFun(int a)\n  {\n      cout << a << endl;\n      return 'r';\n  }\n  \n  int main()\n  {\n      //将函数glFun的地址赋值给变量pFun\n      pFun = glFun;\n      //*pFun显然是取pFun所指向地址的内容，当然也就是取出了函数glFun()的内容，然后给定参数为2。\n      cout<<(*pFun)(2)<<endl;\n      return 0;\n  }\n  ~~~\n\n- typedef  返回类型(\\*类型名)(参数表)\n\n  ~~~c++\n  #include <iostream>\n  using namespace std;\n  \n  //定义了一种新类型PTRFUN\n  //这种类型表示指向某种函数的指针，这种函数以一个int为参数并返回char类型\n  //后面就可以像使用int,char一样使用PTRFUN来定义变量了。\n  typedef char (*PTRFUN)(int); \n  \n  //定义一个返回类型为char，参数为int的函数\n  char glFun(int a)\n  {\n      cout << a << endl;\n      return 'r';\n  }\n  \n  int main()\n  {\n      //将函数glFun的地址赋值给变量pFun\n      PTRFUN pFun = glFun;\n      //*pFun显然是取pFun所指向地址的内容，当然也就是取出了函数glFun()的内容，然后给定参数为2。\n      cout<<(*pFun)(2)<<endl;\n      return 0;\n  }\n  ~~~\n\n  \n\n### 2.枚举常量不能用做宏判断的条件\n\n比如下面的代码\n\n~~~c++\n#include <iostream>\n#define PLATFORM PS4\nenum PLATFORM_TYPE {\n\tSWITCH,\n\tPS4,\n};\nint main()\n{\n#if PLATFORM == SWITCH\t\t//判断语句1\n\tstd::cout << \"Nintendo!\" << std::endl;\n#elif PLATFORM == PS4\t\t//判断语句2\n\tstd::cout << \"Sony!\" << std::endl;\n#endif\n\treturn 0;\n}\n~~~\n\n按照预期，如果#define PLATFORM SWITCH输出“Nintendo!”， 如果#define PLATFORM PS4则输出“Sony!”。\n\n但是实际运行的结果总是“Nintendo!”，也就是判断语句1始终成立！\n\n百思不得其解之后，我终于意识到条件编译是预编译阶段的事情，而enum的定义要等到编译阶段才会处理。也就是说在预编译阶段压根儿没有SWITCH和PS4这两个标识符。而且在 #if 之后，所有不能通过 #define 被替换为字面量的标识符和关键字都会被替换为0，因此也不会报错。所以实际上执行的判断语句是：\n\n~~~c++\n#if 0 == 0\t\t//判断语句1\n\tstd::cout << \"Nintendo!\" << std::endl;\n#elif 0 == 0\t//判断语句2\n\tstd::cout << \"Sony!\" << std::endl;\n#endif\n~~~\n\n所以才会有上面的现象。修改后逻辑终于正常了，代码如下：\n\n~~~c++\n#include <iostream>\n#define PLATFORM PS4\n#define SWITCH 1\n#define PS4 2\nint main()\n{\n#if PLATFORM == SWITCH\t\t//判断语句1\n\tstd::cout << \"Nintendo!\" << std::endl;\n#elif PLATFORM == PS4\t\t//判断语句2\n\tstd::cout << \"Sony!\" << std::endl;\n#endif\n\treturn 0;\n}\n~~~\n\n### 3.C/C++的头文件\n\n保证同一个头文件不会被包含两次的方法有两个：\n\n1.#ifndef\n\n~~~c++\n#ifndef __SOMEFILE_H__\n#define __SOMEFILE_H__\n// 头文件声明、定义语句\n#endif\n~~~\n\n这种方式受C/C++语言标准支持。\n\n优点是它不仅可以保证同一个文件不会被包含多次，也能保证内容完全相同的多个文件（或者代码片段）也不会被同时包含。\n\n缺点是宏名冲突时会出现一系列奇怪的问题。\n\n2.\\#pragma once\n\n~~~ c++\n#pragma once\n// 头文件声明、定义语句\n~~~\n\n\\#pragma once 一般由编译器提供保证：同一个文件不会被包含多次。注意这里所说的“同一个文件”是指物理上的一个文件，不适用于多个相同内容的文件。\n\n优点是写法简洁，也不必再担心宏名冲突。\n\n缺点是在存在多个相同内容的头文件时，还是会出现多次包含的情况。以及部分老的编译器可能不支持。\n\n### 4.垃圾回收算法\n\n1. 引用计数法\n\n2. Mark-Sweep法（标记清除法）：一个优点就是可以避免循环引用，当A和B两个对象可能互相指向对方时，标记可以避免无限递归。缺点是会带来内存碎片。\n3. 三色标记法\n4. 分代收集\n\n### 5.(void)变量\n\n经常在一些驱动代码里面见到这种用法，变量前直接加（void）的语句，一开始对这种用法一头雾水，不知其何意！后经多方查阅资料了解，这只是一种防止编译器编译时报警告的用法。有些变量如果未曾使用，在编译时是会报错，从而有些导致编译不过，所以才会出现这种用法。而此语句在代码中没有具体意义，只是告诉编译器该变量已经使用了。\n\nLua的源代码中将其封装为一个叫做UNUSED的宏：\n\n~~~c\n#define UNUSED(x) ((void)(x))\n~~~\n\n### 6运算符优先级\n\n| 优先级 | 运算符 | 名称或含义       | 使用形式                  | 结合方向   |\n| ------ | ------ | ---------------- | ------------------------- | ---------- |\n| 1      | []     | 数组下标         | 数组名[常量表达式]        | 左到右     |\n|        | ()     | 圆括号           | （表达式）/函数名(形参表) |            |\n|        | .      | 成员选择（对象） | 对象.成员名               |            |\n|        | ->     | 成员选择（指针） | 对象指针->成员名          |            |\n| 2      | -      | 负号运算符       | -表达式                   | **右到左** |\n|        | (类型) | 强制类型转换     | (数据类型)表达式          |            |\n|        | **++** | 自增运算符       | **++变量名/变量名++**     |            |\n|        | **--** | 自减运算符       | **--变量名/变量名--**     |            |\n|        | *****  | 取值运算符       | ***指针变量**             |            |\n|        | **&**  | 取地址运算符     | **&变量名**               |            |\n|        | !      | 逻辑非运算符     | !表达式                   |            |\n|        | ~      | 按位取反运算符   | ~表达式                   |            |\n|        | sizeof | 长度运算符       | sizeof(表达式)            |            |\n| 3      | /      | 除               | 表达式/表达式             | 左到右     |\n|        | *      | 乘               | 表达式*表达式             |            |\n|        | %      | 余数（取模）     | 整型表达式/整型表达式     |            |\n| 4      | +      | 加               | 表达式+表达式             | 左到右     |\n|        | -      | 减               | 表达式-表达式             |            |\n| 5      | <<     | 左移             | 变量<<表达式              | 左到右     |\n|        | >>     | 右移             | 变量>>表达式              |            |\n| 6      | >      | 大于             | 表达式>表达式             | 左到右     |\n|        | >=     | 大于等于         | 表达式>=表达式            |            |\n|        | <      | 小于             | 表达式<表达式             |            |\n|        | <=     | 小于等于         | 表达式<=表达式            |            |\n| 7      | ==     | 等于             | 表达式==表达式            | 左到右     |\n|        | !=     | 不等于           | 表达式!= 表达式           |            |\n| 8      | &      | 按位与           | 表达式&表达式             | 左到右     |\n| 9      | **^**  | 按位异或         | 表达式^表达式             | 左到右     |\n| 10     | \\|     | 按位或           | 表达式\\|表达式            | 左到右     |\n| 11     | &&     | 逻辑与           | 表达式&&表达式            | 左到右     |\n| 12     | \\|\\|   | 逻辑或           | 表达式\\|\\|表达式          | 左到右     |\n| 13     | ?:     | 条件运算符       | 表达式1? 表达式2: 表达式3 | **右到左** |\n| 14     | =      | 赋值运算符       | 变量=表达式               | **右到左** |\n|        | /=     | 除后赋值         | 变量/=表达式              |            |\n|        | *=     | 乘后赋值         | 变量*=表达式              |            |\n|        | %=     | 取模后赋值       | 变量%=表达式              |            |\n|        | +=     | 加后赋值         | 变量+=表达式              |            |\n|        | -=     | 减后赋值         | 变量-=表达式              |            |\n|        | <<=    | 左移后赋值       | 变量<<=表达式             |            |\n|        | >>=    | 右移后赋值       | 变量>>=表达式             |            |\n|        | &=     | 按位与后赋值     | 变量&=表达式              |            |\n|        | ^=     | 按位异或后赋值   | 变量^=表达式              |            |\n|        | \\|=    | 按位或后赋值     | 变量\\|==表达式            |            |\n| 15     | ,      | 逗号运算符       | 表达式,表达式,…           | 左到右     |\n\n### 7.定义和声明\n\n关于定义和声明的定义，C＋＋primer的解释是这样的：\n\n变量的定义（definition）:用于为变量分配存储空间，还可以为变量指定初始值。在一个程序中，变量有且仅有一个定义；\n变量的声明（declaration）：用于向程序表明变量的类型和名字。\n\n**定义也是声明：当定义变量时我们声明了它的类型和名字。**\n\n可以通过使用extern关键字声明变量名而不定义它。\n\n任何变量或函数等，都是要求先声明再使用。某些情况下，要使用的变量或函数还没有定义，则需要**前向声明**。\n\n#### 关于前向声明（forward declaration）：\n\n- 前向声明能显著缩短编译链接时间。\n- 当两个定义互相使用对方时，需要使用前向声明打破循环。\n- 在定义一个类型时如果用到了自身的指针时，需要使用前向声明。\n\n### 8.字节对齐\n\n字节对齐基于三条原则：\n\n1. 数据成员对齐规则：结构体（struct）的数据成员，第一个数据成员放在offset为0的地方，之后的每个数据成员存储的起始位置要从该成员大小的整数倍开始（比如int在32位机子上为4字节，所以要从4的整数倍地址开始存储）。\n2. 结构体作为成员：如果一个结构体里同时包含结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储（如struct a里有struct b,b里有char,int ,double等元素，那么b应该从8(即double类型的大小)的整数倍开始存储）。\n3. 结构体的总大小：即sizeof的结果。在按之前的对齐原则计算出来的大小的基础上，必须还得是其内部最大成员的整数倍，不足的要补齐（如struct里最大为double，现在计算得到的已经是11，则总大小为16）。","source":"_posts/Trivial.md","raw":"---\ntitle: 知识点记录\ntags: 其他\ncategories: 学习笔记\n---\n\n# 知识点记录\n\n平时总是能遇到各种各样零碎的知识点，有的太小了没有写下来，有的则是太零碎了不知道怎么写下来，久而久之很多以前知道的也忘了，以前遇到过的问题又再次成为阻碍，那感觉实在难受。所以开一个笔记专门记录一些小的知识点，等有空再把知识点细化单独整理成博客。相当于作为博客的题材库。\n\n## C/C++\n\n### 1.typedef与函数指针\n\n#### typedef常见的用法\n\n相当于是给类型起一个别名\n\n~~~c++\ntypedef int myInt;\n~~~\n\n#### 函数指针\n\n- 返回类型(\\*函数名)(参数表)\n\n  ~~~\n  #include <iostream>\n  using namespace std;\n  \n  //定义一个函数指针pFUN，它指向一个返回类型为char，有一个整型的参数的函数\n  char (*pFun)(int);\n  \n  //定义一个返回类型为char，参数为int的函数\n  //从指针层面上理解该函数，即函数的函数名实际上是一个指针，\n  //该指针指向函数在内存中的首地址\n  char glFun(int a)\n  {\n      cout << a << endl;\n      return 'r';\n  }\n  \n  int main()\n  {\n      //将函数glFun的地址赋值给变量pFun\n      pFun = glFun;\n      //*pFun显然是取pFun所指向地址的内容，当然也就是取出了函数glFun()的内容，然后给定参数为2。\n      cout<<(*pFun)(2)<<endl;\n      return 0;\n  }\n  ~~~\n\n- typedef  返回类型(\\*类型名)(参数表)\n\n  ~~~c++\n  #include <iostream>\n  using namespace std;\n  \n  //定义了一种新类型PTRFUN\n  //这种类型表示指向某种函数的指针，这种函数以一个int为参数并返回char类型\n  //后面就可以像使用int,char一样使用PTRFUN来定义变量了。\n  typedef char (*PTRFUN)(int); \n  \n  //定义一个返回类型为char，参数为int的函数\n  char glFun(int a)\n  {\n      cout << a << endl;\n      return 'r';\n  }\n  \n  int main()\n  {\n      //将函数glFun的地址赋值给变量pFun\n      PTRFUN pFun = glFun;\n      //*pFun显然是取pFun所指向地址的内容，当然也就是取出了函数glFun()的内容，然后给定参数为2。\n      cout<<(*pFun)(2)<<endl;\n      return 0;\n  }\n  ~~~\n\n  \n\n### 2.枚举常量不能用做宏判断的条件\n\n比如下面的代码\n\n~~~c++\n#include <iostream>\n#define PLATFORM PS4\nenum PLATFORM_TYPE {\n\tSWITCH,\n\tPS4,\n};\nint main()\n{\n#if PLATFORM == SWITCH\t\t//判断语句1\n\tstd::cout << \"Nintendo!\" << std::endl;\n#elif PLATFORM == PS4\t\t//判断语句2\n\tstd::cout << \"Sony!\" << std::endl;\n#endif\n\treturn 0;\n}\n~~~\n\n按照预期，如果#define PLATFORM SWITCH输出“Nintendo!”， 如果#define PLATFORM PS4则输出“Sony!”。\n\n但是实际运行的结果总是“Nintendo!”，也就是判断语句1始终成立！\n\n百思不得其解之后，我终于意识到条件编译是预编译阶段的事情，而enum的定义要等到编译阶段才会处理。也就是说在预编译阶段压根儿没有SWITCH和PS4这两个标识符。而且在 #if 之后，所有不能通过 #define 被替换为字面量的标识符和关键字都会被替换为0，因此也不会报错。所以实际上执行的判断语句是：\n\n~~~c++\n#if 0 == 0\t\t//判断语句1\n\tstd::cout << \"Nintendo!\" << std::endl;\n#elif 0 == 0\t//判断语句2\n\tstd::cout << \"Sony!\" << std::endl;\n#endif\n~~~\n\n所以才会有上面的现象。修改后逻辑终于正常了，代码如下：\n\n~~~c++\n#include <iostream>\n#define PLATFORM PS4\n#define SWITCH 1\n#define PS4 2\nint main()\n{\n#if PLATFORM == SWITCH\t\t//判断语句1\n\tstd::cout << \"Nintendo!\" << std::endl;\n#elif PLATFORM == PS4\t\t//判断语句2\n\tstd::cout << \"Sony!\" << std::endl;\n#endif\n\treturn 0;\n}\n~~~\n\n### 3.C/C++的头文件\n\n保证同一个头文件不会被包含两次的方法有两个：\n\n1.#ifndef\n\n~~~c++\n#ifndef __SOMEFILE_H__\n#define __SOMEFILE_H__\n// 头文件声明、定义语句\n#endif\n~~~\n\n这种方式受C/C++语言标准支持。\n\n优点是它不仅可以保证同一个文件不会被包含多次，也能保证内容完全相同的多个文件（或者代码片段）也不会被同时包含。\n\n缺点是宏名冲突时会出现一系列奇怪的问题。\n\n2.\\#pragma once\n\n~~~ c++\n#pragma once\n// 头文件声明、定义语句\n~~~\n\n\\#pragma once 一般由编译器提供保证：同一个文件不会被包含多次。注意这里所说的“同一个文件”是指物理上的一个文件，不适用于多个相同内容的文件。\n\n优点是写法简洁，也不必再担心宏名冲突。\n\n缺点是在存在多个相同内容的头文件时，还是会出现多次包含的情况。以及部分老的编译器可能不支持。\n\n### 4.垃圾回收算法\n\n1. 引用计数法\n\n2. Mark-Sweep法（标记清除法）：一个优点就是可以避免循环引用，当A和B两个对象可能互相指向对方时，标记可以避免无限递归。缺点是会带来内存碎片。\n3. 三色标记法\n4. 分代收集\n\n### 5.(void)变量\n\n经常在一些驱动代码里面见到这种用法，变量前直接加（void）的语句，一开始对这种用法一头雾水，不知其何意！后经多方查阅资料了解，这只是一种防止编译器编译时报警告的用法。有些变量如果未曾使用，在编译时是会报错，从而有些导致编译不过，所以才会出现这种用法。而此语句在代码中没有具体意义，只是告诉编译器该变量已经使用了。\n\nLua的源代码中将其封装为一个叫做UNUSED的宏：\n\n~~~c\n#define UNUSED(x) ((void)(x))\n~~~\n\n### 6运算符优先级\n\n| 优先级 | 运算符 | 名称或含义       | 使用形式                  | 结合方向   |\n| ------ | ------ | ---------------- | ------------------------- | ---------- |\n| 1      | []     | 数组下标         | 数组名[常量表达式]        | 左到右     |\n|        | ()     | 圆括号           | （表达式）/函数名(形参表) |            |\n|        | .      | 成员选择（对象） | 对象.成员名               |            |\n|        | ->     | 成员选择（指针） | 对象指针->成员名          |            |\n| 2      | -      | 负号运算符       | -表达式                   | **右到左** |\n|        | (类型) | 强制类型转换     | (数据类型)表达式          |            |\n|        | **++** | 自增运算符       | **++变量名/变量名++**     |            |\n|        | **--** | 自减运算符       | **--变量名/变量名--**     |            |\n|        | *****  | 取值运算符       | ***指针变量**             |            |\n|        | **&**  | 取地址运算符     | **&变量名**               |            |\n|        | !      | 逻辑非运算符     | !表达式                   |            |\n|        | ~      | 按位取反运算符   | ~表达式                   |            |\n|        | sizeof | 长度运算符       | sizeof(表达式)            |            |\n| 3      | /      | 除               | 表达式/表达式             | 左到右     |\n|        | *      | 乘               | 表达式*表达式             |            |\n|        | %      | 余数（取模）     | 整型表达式/整型表达式     |            |\n| 4      | +      | 加               | 表达式+表达式             | 左到右     |\n|        | -      | 减               | 表达式-表达式             |            |\n| 5      | <<     | 左移             | 变量<<表达式              | 左到右     |\n|        | >>     | 右移             | 变量>>表达式              |            |\n| 6      | >      | 大于             | 表达式>表达式             | 左到右     |\n|        | >=     | 大于等于         | 表达式>=表达式            |            |\n|        | <      | 小于             | 表达式<表达式             |            |\n|        | <=     | 小于等于         | 表达式<=表达式            |            |\n| 7      | ==     | 等于             | 表达式==表达式            | 左到右     |\n|        | !=     | 不等于           | 表达式!= 表达式           |            |\n| 8      | &      | 按位与           | 表达式&表达式             | 左到右     |\n| 9      | **^**  | 按位异或         | 表达式^表达式             | 左到右     |\n| 10     | \\|     | 按位或           | 表达式\\|表达式            | 左到右     |\n| 11     | &&     | 逻辑与           | 表达式&&表达式            | 左到右     |\n| 12     | \\|\\|   | 逻辑或           | 表达式\\|\\|表达式          | 左到右     |\n| 13     | ?:     | 条件运算符       | 表达式1? 表达式2: 表达式3 | **右到左** |\n| 14     | =      | 赋值运算符       | 变量=表达式               | **右到左** |\n|        | /=     | 除后赋值         | 变量/=表达式              |            |\n|        | *=     | 乘后赋值         | 变量*=表达式              |            |\n|        | %=     | 取模后赋值       | 变量%=表达式              |            |\n|        | +=     | 加后赋值         | 变量+=表达式              |            |\n|        | -=     | 减后赋值         | 变量-=表达式              |            |\n|        | <<=    | 左移后赋值       | 变量<<=表达式             |            |\n|        | >>=    | 右移后赋值       | 变量>>=表达式             |            |\n|        | &=     | 按位与后赋值     | 变量&=表达式              |            |\n|        | ^=     | 按位异或后赋值   | 变量^=表达式              |            |\n|        | \\|=    | 按位或后赋值     | 变量\\|==表达式            |            |\n| 15     | ,      | 逗号运算符       | 表达式,表达式,…           | 左到右     |\n\n### 7.定义和声明\n\n关于定义和声明的定义，C＋＋primer的解释是这样的：\n\n变量的定义（definition）:用于为变量分配存储空间，还可以为变量指定初始值。在一个程序中，变量有且仅有一个定义；\n变量的声明（declaration）：用于向程序表明变量的类型和名字。\n\n**定义也是声明：当定义变量时我们声明了它的类型和名字。**\n\n可以通过使用extern关键字声明变量名而不定义它。\n\n任何变量或函数等，都是要求先声明再使用。某些情况下，要使用的变量或函数还没有定义，则需要**前向声明**。\n\n#### 关于前向声明（forward declaration）：\n\n- 前向声明能显著缩短编译链接时间。\n- 当两个定义互相使用对方时，需要使用前向声明打破循环。\n- 在定义一个类型时如果用到了自身的指针时，需要使用前向声明。\n\n### 8.字节对齐\n\n字节对齐基于三条原则：\n\n1. 数据成员对齐规则：结构体（struct）的数据成员，第一个数据成员放在offset为0的地方，之后的每个数据成员存储的起始位置要从该成员大小的整数倍开始（比如int在32位机子上为4字节，所以要从4的整数倍地址开始存储）。\n2. 结构体作为成员：如果一个结构体里同时包含结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储（如struct a里有struct b,b里有char,int ,double等元素，那么b应该从8(即double类型的大小)的整数倍开始存储）。\n3. 结构体的总大小：即sizeof的结果。在按之前的对齐原则计算出来的大小的基础上，必须还得是其内部最大成员的整数倍，不足的要补齐（如struct里最大为double，现在计算得到的已经是11，则总大小为16）。","slug":"Trivial","published":1,"date":"2020-03-05T16:41:47.143Z","updated":"2020-03-05T16:41:47.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjgofpf7000icgu8btfv2i50","content":"<h1 id=\"知识点记录\"><a href=\"#知识点记录\" class=\"headerlink\" title=\"知识点记录\"></a>知识点记录</h1><p>平时总是能遇到各种各样零碎的知识点，有的太小了没有写下来，有的则是太零碎了不知道怎么写下来，久而久之很多以前知道的也忘了，以前遇到过的问题又再次成为阻碍，那感觉实在难受。所以开一个笔记专门记录一些小的知识点，等有空再把知识点细化单独整理成博客。相当于作为博客的题材库。</p>\n<h2 id=\"C-C\"><a href=\"#C-C\" class=\"headerlink\" title=\"C/C++\"></a>C/C++</h2><h3 id=\"1-typedef与函数指针\"><a href=\"#1-typedef与函数指针\" class=\"headerlink\" title=\"1.typedef与函数指针\"></a>1.typedef与函数指针</h3><h4 id=\"typedef常见的用法\"><a href=\"#typedef常见的用法\" class=\"headerlink\" title=\"typedef常见的用法\"></a>typedef常见的用法</h4><p>相当于是给类型起一个别名</p>\n<pre><code class=\"c++\">typedef int myInt;</code></pre>\n<h4 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h4><ul>\n<li><p>返回类型(*函数名)(参数表)</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n//定义一个函数指针pFUN，它指向一个返回类型为char，有一个整型的参数的函数\nchar (*pFun)(int);\n\n//定义一个返回类型为char，参数为int的函数\n//从指针层面上理解该函数，即函数的函数名实际上是一个指针，\n//该指针指向函数在内存中的首地址\nchar glFun(int a)\n&#123;\n    cout &lt;&lt; a &lt;&lt; endl;\n    return &#39;r&#39;;\n&#125;\n\nint main()\n&#123;\n    //将函数glFun的地址赋值给变量pFun\n    pFun = glFun;\n    //*pFun显然是取pFun所指向地址的内容，当然也就是取出了函数glFun()的内容，然后给定参数为2。\n    cout&lt;&lt;(*pFun)(2)&lt;&lt;endl;\n    return 0;\n&#125;</code></pre></li>\n<li><p>typedef  返回类型(*类型名)(参数表)</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n//定义了一种新类型PTRFUN\n//这种类型表示指向某种函数的指针，这种函数以一个int为参数并返回char类型\n//后面就可以像使用int,char一样使用PTRFUN来定义变量了。\ntypedef char (*PTRFUN)(int); \n\n//定义一个返回类型为char，参数为int的函数\nchar glFun(int a)\n&#123;\n    cout &lt;&lt; a &lt;&lt; endl;\n    return &#39;r&#39;;\n&#125;\n\nint main()\n&#123;\n    //将函数glFun的地址赋值给变量pFun\n    PTRFUN pFun = glFun;\n    //*pFun显然是取pFun所指向地址的内容，当然也就是取出了函数glFun()的内容，然后给定参数为2。\n    cout&lt;&lt;(*pFun)(2)&lt;&lt;endl;\n    return 0;\n&#125;</code></pre>\n</li>\n</ul>\n<h3 id=\"2-枚举常量不能用做宏判断的条件\"><a href=\"#2-枚举常量不能用做宏判断的条件\" class=\"headerlink\" title=\"2.枚举常量不能用做宏判断的条件\"></a>2.枚举常量不能用做宏判断的条件</h3><p>比如下面的代码</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\n#define PLATFORM PS4\nenum PLATFORM_TYPE &#123;\n    SWITCH,\n    PS4,\n&#125;;\nint main()\n&#123;\n#if PLATFORM == SWITCH        //判断语句1\n    std::cout &lt;&lt; &quot;Nintendo!&quot; &lt;&lt; std::endl;\n#elif PLATFORM == PS4        //判断语句2\n    std::cout &lt;&lt; &quot;Sony!&quot; &lt;&lt; std::endl;\n#endif\n    return 0;\n&#125;</code></pre>\n<p>按照预期，如果#define PLATFORM SWITCH输出“Nintendo!”， 如果#define PLATFORM PS4则输出“Sony!”。</p>\n<p>但是实际运行的结果总是“Nintendo!”，也就是判断语句1始终成立！</p>\n<p>百思不得其解之后，我终于意识到条件编译是预编译阶段的事情，而enum的定义要等到编译阶段才会处理。也就是说在预编译阶段压根儿没有SWITCH和PS4这两个标识符。而且在 #if 之后，所有不能通过 #define 被替换为字面量的标识符和关键字都会被替换为0，因此也不会报错。所以实际上执行的判断语句是：</p>\n<pre><code class=\"c++\">#if 0 == 0        //判断语句1\n    std::cout &lt;&lt; &quot;Nintendo!&quot; &lt;&lt; std::endl;\n#elif 0 == 0    //判断语句2\n    std::cout &lt;&lt; &quot;Sony!&quot; &lt;&lt; std::endl;\n#endif</code></pre>\n<p>所以才会有上面的现象。修改后逻辑终于正常了，代码如下：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\n#define PLATFORM PS4\n#define SWITCH 1\n#define PS4 2\nint main()\n&#123;\n#if PLATFORM == SWITCH        //判断语句1\n    std::cout &lt;&lt; &quot;Nintendo!&quot; &lt;&lt; std::endl;\n#elif PLATFORM == PS4        //判断语句2\n    std::cout &lt;&lt; &quot;Sony!&quot; &lt;&lt; std::endl;\n#endif\n    return 0;\n&#125;</code></pre>\n<h3 id=\"3-C-C-的头文件\"><a href=\"#3-C-C-的头文件\" class=\"headerlink\" title=\"3.C/C++的头文件\"></a>3.C/C++的头文件</h3><p>保证同一个头文件不会被包含两次的方法有两个：</p>\n<p>1.#ifndef</p>\n<pre><code class=\"c++\">#ifndef __SOMEFILE_H__\n#define __SOMEFILE_H__\n// 头文件声明、定义语句\n#endif</code></pre>\n<p>这种方式受C/C++语言标准支持。</p>\n<p>优点是它不仅可以保证同一个文件不会被包含多次，也能保证内容完全相同的多个文件（或者代码片段）也不会被同时包含。</p>\n<p>缺点是宏名冲突时会出现一系列奇怪的问题。</p>\n<p>2.#pragma once</p>\n<pre><code class=\"c++\">#pragma once\n// 头文件声明、定义语句</code></pre>\n<p>#pragma once 一般由编译器提供保证：同一个文件不会被包含多次。注意这里所说的“同一个文件”是指物理上的一个文件，不适用于多个相同内容的文件。</p>\n<p>优点是写法简洁，也不必再担心宏名冲突。</p>\n<p>缺点是在存在多个相同内容的头文件时，还是会出现多次包含的情况。以及部分老的编译器可能不支持。</p>\n<h3 id=\"4-垃圾回收算法\"><a href=\"#4-垃圾回收算法\" class=\"headerlink\" title=\"4.垃圾回收算法\"></a>4.垃圾回收算法</h3><ol>\n<li><p>引用计数法</p>\n</li>\n<li><p>Mark-Sweep法（标记清除法）：一个优点就是可以避免循环引用，当A和B两个对象可能互相指向对方时，标记可以避免无限递归。缺点是会带来内存碎片。</p>\n</li>\n<li><p>三色标记法</p>\n</li>\n<li><p>分代收集</p>\n</li>\n</ol>\n<h3 id=\"5-void-变量\"><a href=\"#5-void-变量\" class=\"headerlink\" title=\"5.(void)变量\"></a>5.(void)变量</h3><p>经常在一些驱动代码里面见到这种用法，变量前直接加（void）的语句，一开始对这种用法一头雾水，不知其何意！后经多方查阅资料了解，这只是一种防止编译器编译时报警告的用法。有些变量如果未曾使用，在编译时是会报错，从而有些导致编译不过，所以才会出现这种用法。而此语句在代码中没有具体意义，只是告诉编译器该变量已经使用了。</p>\n<p>Lua的源代码中将其封装为一个叫做UNUSED的宏：</p>\n<pre><code class=\"c\">#define UNUSED(x) ((void)(x))</code></pre>\n<h3 id=\"6运算符优先级\"><a href=\"#6运算符优先级\" class=\"headerlink\" title=\"6运算符优先级\"></a>6运算符优先级</h3><table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>名称或含义</th>\n<th>使用形式</th>\n<th>结合方向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>[]</td>\n<td>数组下标</td>\n<td>数组名[常量表达式]</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>()</td>\n<td>圆括号</td>\n<td>（表达式）/函数名(形参表)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>.</td>\n<td>成员选择（对象）</td>\n<td>对象.成员名</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>-&gt;</td>\n<td>成员选择（指针）</td>\n<td>对象指针-&gt;成员名</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>-</td>\n<td>负号运算符</td>\n<td>-表达式</td>\n<td><strong>右到左</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>(类型)</td>\n<td>强制类型转换</td>\n<td>(数据类型)表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>++</strong></td>\n<td>自增运算符</td>\n<td><strong>++变量名/变量名++</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>–</strong></td>\n<td>自减运算符</td>\n<td><strong>–变量名/变量名–</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>*****</td>\n<td>取值运算符</td>\n<td><strong>*指针变量</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>&amp;</strong></td>\n<td>取地址运算符</td>\n<td><strong>&amp;变量名</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>!</td>\n<td>逻辑非运算符</td>\n<td>!表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>~</td>\n<td>按位取反运算符</td>\n<td>~表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>sizeof</td>\n<td>长度运算符</td>\n<td>sizeof(表达式)</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>/</td>\n<td>除</td>\n<td>表达式/表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>*</td>\n<td>乘</td>\n<td>表达式*表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>%</td>\n<td>余数（取模）</td>\n<td>整型表达式/整型表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>+</td>\n<td>加</td>\n<td>表达式+表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>-</td>\n<td>减</td>\n<td>表达式-表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>变量&lt;&lt;表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>变量&gt;&gt;表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>6</td>\n<td>&gt;</td>\n<td>大于</td>\n<td>表达式&gt;表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>表达式&gt;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&lt;</td>\n<td>小于</td>\n<td>表达式&lt;表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>表达式&lt;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>7</td>\n<td>==</td>\n<td>等于</td>\n<td>表达式==表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>!=</td>\n<td>不等于</td>\n<td>表达式!= 表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>8</td>\n<td>&amp;</td>\n<td>按位与</td>\n<td>表达式&amp;表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>9</td>\n<td><strong>^</strong></td>\n<td>按位异或</td>\n<td>表达式^表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>10</td>\n<td>|</td>\n<td>按位或</td>\n<td>表达式|表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>11</td>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n<td>表达式&amp;&amp;表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>12</td>\n<td>||</td>\n<td>逻辑或</td>\n<td>表达式||表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>13</td>\n<td>?:</td>\n<td>条件运算符</td>\n<td>表达式1? 表达式2: 表达式3</td>\n<td><strong>右到左</strong></td>\n</tr>\n<tr>\n<td>14</td>\n<td>=</td>\n<td>赋值运算符</td>\n<td>变量=表达式</td>\n<td><strong>右到左</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>/=</td>\n<td>除后赋值</td>\n<td>变量/=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>*=</td>\n<td>乘后赋值</td>\n<td>变量*=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>%=</td>\n<td>取模后赋值</td>\n<td>变量%=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>+=</td>\n<td>加后赋值</td>\n<td>变量+=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>-=</td>\n<td>减后赋值</td>\n<td>变量-=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&lt;&lt;=</td>\n<td>左移后赋值</td>\n<td>变量&lt;&lt;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&gt;&gt;=</td>\n<td>右移后赋值</td>\n<td>变量&gt;&gt;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&amp;=</td>\n<td>按位与后赋值</td>\n<td>变量&amp;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>^=</td>\n<td>按位异或后赋值</td>\n<td>变量^=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>|=</td>\n<td>按位或后赋值</td>\n<td>变量|==表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>15</td>\n<td>,</td>\n<td>逗号运算符</td>\n<td>表达式,表达式,…</td>\n<td>左到右</td>\n</tr>\n</tbody></table>\n<h3 id=\"7-定义和声明\"><a href=\"#7-定义和声明\" class=\"headerlink\" title=\"7.定义和声明\"></a>7.定义和声明</h3><p>关于定义和声明的定义，C＋＋primer的解释是这样的：</p>\n<p>变量的定义（definition）:用于为变量分配存储空间，还可以为变量指定初始值。在一个程序中，变量有且仅有一个定义；<br>变量的声明（declaration）：用于向程序表明变量的类型和名字。</p>\n<p><strong>定义也是声明：当定义变量时我们声明了它的类型和名字。</strong></p>\n<p>可以通过使用extern关键字声明变量名而不定义它。</p>\n<p>任何变量或函数等，都是要求先声明再使用。某些情况下，要使用的变量或函数还没有定义，则需要<strong>前向声明</strong>。</p>\n<h4 id=\"关于前向声明（forward-declaration）：\"><a href=\"#关于前向声明（forward-declaration）：\" class=\"headerlink\" title=\"关于前向声明（forward declaration）：\"></a>关于前向声明（forward declaration）：</h4><ul>\n<li>前向声明能显著缩短编译链接时间。</li>\n<li>当两个定义互相使用对方时，需要使用前向声明打破循环。</li>\n<li>在定义一个类型时如果用到了自身的指针时，需要使用前向声明。</li>\n</ul>\n<h3 id=\"8-字节对齐\"><a href=\"#8-字节对齐\" class=\"headerlink\" title=\"8.字节对齐\"></a>8.字节对齐</h3><p>字节对齐基于三条原则：</p>\n<ol>\n<li>数据成员对齐规则：结构体（struct）的数据成员，第一个数据成员放在offset为0的地方，之后的每个数据成员存储的起始位置要从该成员大小的整数倍开始（比如int在32位机子上为4字节，所以要从4的整数倍地址开始存储）。</li>\n<li>结构体作为成员：如果一个结构体里同时包含结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储（如struct a里有struct b,b里有char,int ,double等元素，那么b应该从8(即double类型的大小)的整数倍开始存储）。</li>\n<li>结构体的总大小：即sizeof的结果。在按之前的对齐原则计算出来的大小的基础上，必须还得是其内部最大成员的整数倍，不足的要补齐（如struct里最大为double，现在计算得到的已经是11，则总大小为16）。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"知识点记录\"><a href=\"#知识点记录\" class=\"headerlink\" title=\"知识点记录\"></a>知识点记录</h1><p>平时总是能遇到各种各样零碎的知识点，有的太小了没有写下来，有的则是太零碎了不知道怎么写下来，久而久之很多以前知道的也忘了，以前遇到过的问题又再次成为阻碍，那感觉实在难受。所以开一个笔记专门记录一些小的知识点，等有空再把知识点细化单独整理成博客。相当于作为博客的题材库。</p>\n<h2 id=\"C-C\"><a href=\"#C-C\" class=\"headerlink\" title=\"C/C++\"></a>C/C++</h2><h3 id=\"1-typedef与函数指针\"><a href=\"#1-typedef与函数指针\" class=\"headerlink\" title=\"1.typedef与函数指针\"></a>1.typedef与函数指针</h3><h4 id=\"typedef常见的用法\"><a href=\"#typedef常见的用法\" class=\"headerlink\" title=\"typedef常见的用法\"></a>typedef常见的用法</h4><p>相当于是给类型起一个别名</p>\n<pre><code class=\"c++\">typedef int myInt;</code></pre>\n<h4 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h4><ul>\n<li><p>返回类型(*函数名)(参数表)</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n//定义一个函数指针pFUN，它指向一个返回类型为char，有一个整型的参数的函数\nchar (*pFun)(int);\n\n//定义一个返回类型为char，参数为int的函数\n//从指针层面上理解该函数，即函数的函数名实际上是一个指针，\n//该指针指向函数在内存中的首地址\nchar glFun(int a)\n&#123;\n    cout &lt;&lt; a &lt;&lt; endl;\n    return &#39;r&#39;;\n&#125;\n\nint main()\n&#123;\n    //将函数glFun的地址赋值给变量pFun\n    pFun = glFun;\n    //*pFun显然是取pFun所指向地址的内容，当然也就是取出了函数glFun()的内容，然后给定参数为2。\n    cout&lt;&lt;(*pFun)(2)&lt;&lt;endl;\n    return 0;\n&#125;</code></pre></li>\n<li><p>typedef  返回类型(*类型名)(参数表)</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\nusing namespace std;\n\n//定义了一种新类型PTRFUN\n//这种类型表示指向某种函数的指针，这种函数以一个int为参数并返回char类型\n//后面就可以像使用int,char一样使用PTRFUN来定义变量了。\ntypedef char (*PTRFUN)(int); \n\n//定义一个返回类型为char，参数为int的函数\nchar glFun(int a)\n&#123;\n    cout &lt;&lt; a &lt;&lt; endl;\n    return &#39;r&#39;;\n&#125;\n\nint main()\n&#123;\n    //将函数glFun的地址赋值给变量pFun\n    PTRFUN pFun = glFun;\n    //*pFun显然是取pFun所指向地址的内容，当然也就是取出了函数glFun()的内容，然后给定参数为2。\n    cout&lt;&lt;(*pFun)(2)&lt;&lt;endl;\n    return 0;\n&#125;</code></pre>\n</li>\n</ul>\n<h3 id=\"2-枚举常量不能用做宏判断的条件\"><a href=\"#2-枚举常量不能用做宏判断的条件\" class=\"headerlink\" title=\"2.枚举常量不能用做宏判断的条件\"></a>2.枚举常量不能用做宏判断的条件</h3><p>比如下面的代码</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\n#define PLATFORM PS4\nenum PLATFORM_TYPE &#123;\n    SWITCH,\n    PS4,\n&#125;;\nint main()\n&#123;\n#if PLATFORM == SWITCH        //判断语句1\n    std::cout &lt;&lt; &quot;Nintendo!&quot; &lt;&lt; std::endl;\n#elif PLATFORM == PS4        //判断语句2\n    std::cout &lt;&lt; &quot;Sony!&quot; &lt;&lt; std::endl;\n#endif\n    return 0;\n&#125;</code></pre>\n<p>按照预期，如果#define PLATFORM SWITCH输出“Nintendo!”， 如果#define PLATFORM PS4则输出“Sony!”。</p>\n<p>但是实际运行的结果总是“Nintendo!”，也就是判断语句1始终成立！</p>\n<p>百思不得其解之后，我终于意识到条件编译是预编译阶段的事情，而enum的定义要等到编译阶段才会处理。也就是说在预编译阶段压根儿没有SWITCH和PS4这两个标识符。而且在 #if 之后，所有不能通过 #define 被替换为字面量的标识符和关键字都会被替换为0，因此也不会报错。所以实际上执行的判断语句是：</p>\n<pre><code class=\"c++\">#if 0 == 0        //判断语句1\n    std::cout &lt;&lt; &quot;Nintendo!&quot; &lt;&lt; std::endl;\n#elif 0 == 0    //判断语句2\n    std::cout &lt;&lt; &quot;Sony!&quot; &lt;&lt; std::endl;\n#endif</code></pre>\n<p>所以才会有上面的现象。修改后逻辑终于正常了，代码如下：</p>\n<pre><code class=\"c++\">#include &lt;iostream&gt;\n#define PLATFORM PS4\n#define SWITCH 1\n#define PS4 2\nint main()\n&#123;\n#if PLATFORM == SWITCH        //判断语句1\n    std::cout &lt;&lt; &quot;Nintendo!&quot; &lt;&lt; std::endl;\n#elif PLATFORM == PS4        //判断语句2\n    std::cout &lt;&lt; &quot;Sony!&quot; &lt;&lt; std::endl;\n#endif\n    return 0;\n&#125;</code></pre>\n<h3 id=\"3-C-C-的头文件\"><a href=\"#3-C-C-的头文件\" class=\"headerlink\" title=\"3.C/C++的头文件\"></a>3.C/C++的头文件</h3><p>保证同一个头文件不会被包含两次的方法有两个：</p>\n<p>1.#ifndef</p>\n<pre><code class=\"c++\">#ifndef __SOMEFILE_H__\n#define __SOMEFILE_H__\n// 头文件声明、定义语句\n#endif</code></pre>\n<p>这种方式受C/C++语言标准支持。</p>\n<p>优点是它不仅可以保证同一个文件不会被包含多次，也能保证内容完全相同的多个文件（或者代码片段）也不会被同时包含。</p>\n<p>缺点是宏名冲突时会出现一系列奇怪的问题。</p>\n<p>2.#pragma once</p>\n<pre><code class=\"c++\">#pragma once\n// 头文件声明、定义语句</code></pre>\n<p>#pragma once 一般由编译器提供保证：同一个文件不会被包含多次。注意这里所说的“同一个文件”是指物理上的一个文件，不适用于多个相同内容的文件。</p>\n<p>优点是写法简洁，也不必再担心宏名冲突。</p>\n<p>缺点是在存在多个相同内容的头文件时，还是会出现多次包含的情况。以及部分老的编译器可能不支持。</p>\n<h3 id=\"4-垃圾回收算法\"><a href=\"#4-垃圾回收算法\" class=\"headerlink\" title=\"4.垃圾回收算法\"></a>4.垃圾回收算法</h3><ol>\n<li><p>引用计数法</p>\n</li>\n<li><p>Mark-Sweep法（标记清除法）：一个优点就是可以避免循环引用，当A和B两个对象可能互相指向对方时，标记可以避免无限递归。缺点是会带来内存碎片。</p>\n</li>\n<li><p>三色标记法</p>\n</li>\n<li><p>分代收集</p>\n</li>\n</ol>\n<h3 id=\"5-void-变量\"><a href=\"#5-void-变量\" class=\"headerlink\" title=\"5.(void)变量\"></a>5.(void)变量</h3><p>经常在一些驱动代码里面见到这种用法，变量前直接加（void）的语句，一开始对这种用法一头雾水，不知其何意！后经多方查阅资料了解，这只是一种防止编译器编译时报警告的用法。有些变量如果未曾使用，在编译时是会报错，从而有些导致编译不过，所以才会出现这种用法。而此语句在代码中没有具体意义，只是告诉编译器该变量已经使用了。</p>\n<p>Lua的源代码中将其封装为一个叫做UNUSED的宏：</p>\n<pre><code class=\"c\">#define UNUSED(x) ((void)(x))</code></pre>\n<h3 id=\"6运算符优先级\"><a href=\"#6运算符优先级\" class=\"headerlink\" title=\"6运算符优先级\"></a>6运算符优先级</h3><table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>名称或含义</th>\n<th>使用形式</th>\n<th>结合方向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>[]</td>\n<td>数组下标</td>\n<td>数组名[常量表达式]</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>()</td>\n<td>圆括号</td>\n<td>（表达式）/函数名(形参表)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>.</td>\n<td>成员选择（对象）</td>\n<td>对象.成员名</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>-&gt;</td>\n<td>成员选择（指针）</td>\n<td>对象指针-&gt;成员名</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>-</td>\n<td>负号运算符</td>\n<td>-表达式</td>\n<td><strong>右到左</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>(类型)</td>\n<td>强制类型转换</td>\n<td>(数据类型)表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>++</strong></td>\n<td>自增运算符</td>\n<td><strong>++变量名/变量名++</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>–</strong></td>\n<td>自减运算符</td>\n<td><strong>–变量名/变量名–</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>*****</td>\n<td>取值运算符</td>\n<td><strong>*指针变量</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><strong>&amp;</strong></td>\n<td>取地址运算符</td>\n<td><strong>&amp;变量名</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>!</td>\n<td>逻辑非运算符</td>\n<td>!表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>~</td>\n<td>按位取反运算符</td>\n<td>~表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>sizeof</td>\n<td>长度运算符</td>\n<td>sizeof(表达式)</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>/</td>\n<td>除</td>\n<td>表达式/表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>*</td>\n<td>乘</td>\n<td>表达式*表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>%</td>\n<td>余数（取模）</td>\n<td>整型表达式/整型表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>+</td>\n<td>加</td>\n<td>表达式+表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>-</td>\n<td>减</td>\n<td>表达式-表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>5</td>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>变量&lt;&lt;表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>变量&gt;&gt;表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>6</td>\n<td>&gt;</td>\n<td>大于</td>\n<td>表达式&gt;表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>表达式&gt;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&lt;</td>\n<td>小于</td>\n<td>表达式&lt;表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>表达式&lt;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>7</td>\n<td>==</td>\n<td>等于</td>\n<td>表达式==表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td></td>\n<td>!=</td>\n<td>不等于</td>\n<td>表达式!= 表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>8</td>\n<td>&amp;</td>\n<td>按位与</td>\n<td>表达式&amp;表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>9</td>\n<td><strong>^</strong></td>\n<td>按位异或</td>\n<td>表达式^表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>10</td>\n<td>|</td>\n<td>按位或</td>\n<td>表达式|表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>11</td>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n<td>表达式&amp;&amp;表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>12</td>\n<td>||</td>\n<td>逻辑或</td>\n<td>表达式||表达式</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>13</td>\n<td>?:</td>\n<td>条件运算符</td>\n<td>表达式1? 表达式2: 表达式3</td>\n<td><strong>右到左</strong></td>\n</tr>\n<tr>\n<td>14</td>\n<td>=</td>\n<td>赋值运算符</td>\n<td>变量=表达式</td>\n<td><strong>右到左</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>/=</td>\n<td>除后赋值</td>\n<td>变量/=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>*=</td>\n<td>乘后赋值</td>\n<td>变量*=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>%=</td>\n<td>取模后赋值</td>\n<td>变量%=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>+=</td>\n<td>加后赋值</td>\n<td>变量+=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>-=</td>\n<td>减后赋值</td>\n<td>变量-=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&lt;&lt;=</td>\n<td>左移后赋值</td>\n<td>变量&lt;&lt;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&gt;&gt;=</td>\n<td>右移后赋值</td>\n<td>变量&gt;&gt;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>&amp;=</td>\n<td>按位与后赋值</td>\n<td>变量&amp;=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>^=</td>\n<td>按位异或后赋值</td>\n<td>变量^=表达式</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>|=</td>\n<td>按位或后赋值</td>\n<td>变量|==表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>15</td>\n<td>,</td>\n<td>逗号运算符</td>\n<td>表达式,表达式,…</td>\n<td>左到右</td>\n</tr>\n</tbody></table>\n<h3 id=\"7-定义和声明\"><a href=\"#7-定义和声明\" class=\"headerlink\" title=\"7.定义和声明\"></a>7.定义和声明</h3><p>关于定义和声明的定义，C＋＋primer的解释是这样的：</p>\n<p>变量的定义（definition）:用于为变量分配存储空间，还可以为变量指定初始值。在一个程序中，变量有且仅有一个定义；<br>变量的声明（declaration）：用于向程序表明变量的类型和名字。</p>\n<p><strong>定义也是声明：当定义变量时我们声明了它的类型和名字。</strong></p>\n<p>可以通过使用extern关键字声明变量名而不定义它。</p>\n<p>任何变量或函数等，都是要求先声明再使用。某些情况下，要使用的变量或函数还没有定义，则需要<strong>前向声明</strong>。</p>\n<h4 id=\"关于前向声明（forward-declaration）：\"><a href=\"#关于前向声明（forward-declaration）：\" class=\"headerlink\" title=\"关于前向声明（forward declaration）：\"></a>关于前向声明（forward declaration）：</h4><ul>\n<li>前向声明能显著缩短编译链接时间。</li>\n<li>当两个定义互相使用对方时，需要使用前向声明打破循环。</li>\n<li>在定义一个类型时如果用到了自身的指针时，需要使用前向声明。</li>\n</ul>\n<h3 id=\"8-字节对齐\"><a href=\"#8-字节对齐\" class=\"headerlink\" title=\"8.字节对齐\"></a>8.字节对齐</h3><p>字节对齐基于三条原则：</p>\n<ol>\n<li>数据成员对齐规则：结构体（struct）的数据成员，第一个数据成员放在offset为0的地方，之后的每个数据成员存储的起始位置要从该成员大小的整数倍开始（比如int在32位机子上为4字节，所以要从4的整数倍地址开始存储）。</li>\n<li>结构体作为成员：如果一个结构体里同时包含结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储（如struct a里有struct b,b里有char,int ,double等元素，那么b应该从8(即double类型的大小)的整数倍开始存储）。</li>\n<li>结构体的总大小：即sizeof的结果。在按之前的对齐原则计算出来的大小的基础上，必须还得是其内部最大成员的整数倍，不足的要补齐（如struct里最大为double，现在计算得到的已经是11，则总大小为16）。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckjgofpeo0001cgu8e1x75qn6","category_id":"ckjgofpeu0003cgu8am1mb0x9","_id":"ckjgofpey0007cgu888rk3i4z"},{"post_id":"ckjgofpf10008cgu80ub800ew","category_id":"ckjgofpeu0003cgu8am1mb0x9","_id":"ckjgofpf4000dcgu82ofi44rb"},{"post_id":"ckjgofpf20009cgu8a31b67rj","category_id":"ckjgofpeu0003cgu8am1mb0x9","_id":"ckjgofpf6000fcgu8936g7ouf"},{"post_id":"ckjgofpf3000bcgu8h7udhpxy","category_id":"ckjgofpeu0003cgu8am1mb0x9","_id":"ckjgofpf7000jcgu85rp24z1d"},{"post_id":"ckjgofpf4000ccgu8d5c4e1q5","category_id":"ckjgofpeu0003cgu8am1mb0x9","_id":"ckjgofpf8000kcgu8e9ebagyr"},{"post_id":"ckjgofpf5000ecgu8cgn0g5m2","category_id":"ckjgofpeu0003cgu8am1mb0x9","_id":"ckjgofpf9000ncgu8gsv77lj8"},{"post_id":"ckjgofpf7000icgu8btfv2i50","category_id":"ckjgofpeu0003cgu8am1mb0x9","_id":"ckjgofpf9000ocgu8f6sf4rmv"}],"PostTag":[{"post_id":"ckjgofpeo0001cgu8e1x75qn6","tag_id":"ckjgofpew0004cgu83h7hhl9l","_id":"ckjgofpey0006cgu89evx7b3s"},{"post_id":"ckjgofpf10008cgu80ub800ew","tag_id":"ckjgofpf3000acgu88k7sd6sy","_id":"ckjgofpf7000hcgu89iw1dt6f"},{"post_id":"ckjgofpf20009cgu8a31b67rj","tag_id":"ckjgofpf3000acgu88k7sd6sy","_id":"ckjgofpf8000mcgu8b0clgix2"},{"post_id":"ckjgofpf3000bcgu8h7udhpxy","tag_id":"ckjgofpf3000acgu88k7sd6sy","_id":"ckjgofpf9000qcgu82ck0fits"},{"post_id":"ckjgofpf4000ccgu8d5c4e1q5","tag_id":"ckjgofpf9000pcgu8f7k6bsiw","_id":"ckjgofpfa000scgu83phb5gti"},{"post_id":"ckjgofpf5000ecgu8cgn0g5m2","tag_id":"ckjgofpf9000rcgu80qxm6yf2","_id":"ckjgofpfb000vcgu89rqg4sva"},{"post_id":"ckjgofpf5000ecgu8cgn0g5m2","tag_id":"ckjgofpfa000tcgu8ch5886x7","_id":"ckjgofpfb000wcgu83drl7f1f"},{"post_id":"ckjgofpf7000icgu8btfv2i50","tag_id":"ckjgofpfb000ucgu870482r1w","_id":"ckjgofpfc000xcgu83uif6wuf"}],"Tag":[{"name":"C#","_id":"ckjgofpew0004cgu83h7hhl9l"},{"name":"Lua","_id":"ckjgofpf3000acgu88k7sd6sy"},{"name":"设计模式","_id":"ckjgofpf9000pcgu8f7k6bsiw"},{"name":"Unity","_id":"ckjgofpf9000rcgu80qxm6yf2"},{"name":"Shader","_id":"ckjgofpfa000tcgu8ch5886x7"},{"name":"其他","_id":"ckjgofpfb000ucgu870482r1w"}]}}